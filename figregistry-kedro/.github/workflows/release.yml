# FigRegistry Kedro Plugin Release Workflow
# Automated PyPI package distribution with comprehensive packaging audit,
# plugin-specific validation, and post-release verification
# 
# This workflow implements the requirements from Section 8.3.2.1 and 8.3.6
# of the technical specification for automated plugin distribution.

name: Release and Distribute Plugin Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty to use current version)'
        required: false
        type: string
      dry_run:
        description: 'Perform dry run without publishing'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"  # Primary release Python version
  KEDRO_MIN_VERSION: "0.18.0"
  KEDRO_MAX_VERSION: "0.20.0"
  COVERAGE_THRESHOLD: 90
  PERFORMANCE_OVERHEAD_LIMIT: 5  # Maximum 5% performance overhead

# Global permissions for security-conscious release workflow
permissions:
  contents: read
  id-token: write  # Required for trusted PyPI publishing
  actions: read

jobs:
  # ============================================================================
  # Pre-Release Validation and Audit
  # ============================================================================
  
  pre_release_audit:
    name: Pre-Release Package Audit
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      version: ${{ steps.version_info.outputs.version }}
      is_prerelease: ${{ steps.version_info.outputs.is_prerelease }}
      release_notes: ${{ steps.version_info.outputs.release_notes }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper version detection
          
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build>=0.7.0 twine>=4.0.0 setuptools-scm>=6.2
          pip install figregistry>=0.3.0  # Core dependency validation
          
      - name: Extract Version Information
        id: version_info
        run: |
          # Extract version from setuptools-scm or tag
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            RELEASE_NOTES="${{ github.event.release.body }}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
          elif [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
            RELEASE_NOTES="Manual release of version ${VERSION}"
            IS_PRERELEASE="false"
          else
            VERSION=$(python -m setuptools_scm)
            RELEASE_NOTES="Development release of version ${VERSION}"
            IS_PRERELEASE="true"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "release_notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT
          echo "Detected version: ${VERSION}"
          echo "Is prerelease: ${IS_PRERELEASE}"
          
      - name: Validate Version Format
        run: |
          VERSION="${{ steps.version_info.outputs.version }}"
          if ! echo "${VERSION}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(\.dev[0-9]+|a[0-9]+|b[0-9]+|rc[0-9]+)?$'; then
            echo "Error: Invalid version format: ${VERSION}"
            exit 1
          fi
          echo "Version format validation passed: ${VERSION}"
          
      - name: Validate Package Metadata
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')
          import figregistry_kedro
          
          # Validate core package information
          assert hasattr(figregistry_kedro, '__version__'), 'Missing __version__ attribute'
          assert hasattr(figregistry_kedro, '__author__'), 'Missing __author__ attribute'
          assert hasattr(figregistry_kedro, '__description__'), 'Missing __description__ attribute'
          
          # Validate plugin discovery function
          plugin_info = figregistry_kedro.get_plugin_info()
          assert 'name' in plugin_info, 'Missing plugin name'
          assert 'version' in plugin_info, 'Missing plugin version'
          assert 'components' in plugin_info, 'Missing plugin components'
          
          print('Package metadata validation passed')
          "
          
      - name: Build Package for Audit
        run: |
          python -m build --sdist --wheel
          
      - name: Package Content Audit
        run: |
          # Audit wheel contents
          echo "=== Wheel Content Audit ==="
          python -m zipfile -l dist/*.whl
          
          # Audit source distribution contents  
          echo "=== Source Distribution Audit ==="
          tar -tzf dist/*.tar.gz
          
          # Validate entry points in wheel
          echo "=== Entry Points Validation ==="
          python -c "
          import zipfile
          import sys
          from pathlib import Path
          
          # Find wheel file
          wheel_files = list(Path('dist').glob('*.whl'))
          if not wheel_files:
              print('Error: No wheel file found')
              sys.exit(1)
              
          wheel_path = wheel_files[0]
          print(f'Auditing wheel: {wheel_path}')
          
          with zipfile.ZipFile(wheel_path) as zf:
              # Check for entry_points.txt
              try:
                  entry_points = zf.read('figregistry_kedro-*.dist-info/entry_points.txt').decode()
                  print('Entry points found:')
                  print(entry_points)
                  
                  # Validate expected entry points
                  required_entries = [
                      'kedro.hooks',
                      'kedro.datasets',
                      'FigureDataSet',
                      'figregistry_hooks'
                  ]
                  
                  for entry in required_entries:
                      if entry not in entry_points:
                          print(f'Warning: Missing expected entry point: {entry}')
                      else:
                          print(f'✓ Found required entry point: {entry}')
                          
              except KeyError:
                  print('Warning: No entry_points.txt found in wheel')
          "
          
      - name: Security Scan
        run: |
          pip install safety>=2.0.0
          safety check --json || echo "Security scan completed with warnings"
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-packages-${{ steps.version_info.outputs.version }}
          path: dist/*
          retention-days: 30

  # ============================================================================
  # Cross-Platform Plugin Validation Matrix  
  # ============================================================================
  
  plugin_validation_matrix:
    name: Plugin Validation (${{ matrix.os }}, Python ${{ matrix.python-version }}, Kedro ${{ matrix.kedro-version }})
    runs-on: ${{ matrix.os }}
    needs: pre_release_audit
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        kedro-version: ["0.18.*", "0.19.*"]
        exclude:
          # Reduce matrix size for efficiency while maintaining coverage
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest  
            python-version: "3.12"
            
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-packages-${{ needs.pre_release_audit.outputs.version }}
          path: dist/
          
      - name: Install Kedro Framework
        run: |
          python -m pip install --upgrade pip
          pip install kedro==${{ matrix.kedro-version }}
          kedro --version
          
      - name: Install Plugin from Built Package
        run: |
          # Install from wheel for faster installation
          pip install dist/*.whl
          
      - name: Validate Plugin Installation
        run: |
          python -c "
          import figregistry_kedro
          print(f'Plugin version: {figregistry_kedro.__version__}')
          
          # Test plugin discovery
          plugin_info = figregistry_kedro.get_plugin_info()
          print(f'Plugin info: {plugin_info}')
          
          # Test core imports
          from figregistry_kedro import FigureDataSet, FigRegistryHooks, FigRegistryConfigBridge
          print('✓ All core components imported successfully')
          
          # Test version compatibility validation
          try:
              figregistry_kedro.validate_version_compatibility()
              print('✓ Version compatibility validation passed')
          except Exception as e:
              print(f'✗ Version compatibility check failed: {e}')
              exit(1)
          "
          
      - name: Test Hook Registration
        run: |
          python -c "
          from figregistry_kedro.hooks import FigRegistryHooks
          
          # Test hook instantiation
          hooks = FigRegistryHooks()
          print('✓ Hook instantiation successful')
          
          # Test hook methods exist and are callable
          required_methods = ['after_context_created', 'before_pipeline_run', 'after_pipeline_run']
          for method in required_methods:
              if not hasattr(hooks, method):
                  print(f'✗ Missing required hook method: {method}')
                  exit(1)
              if not callable(getattr(hooks, method)):
                  print(f'✗ Hook method not callable: {method}')
                  exit(1)
          print('✓ All required hook methods available')
          "
          
      - name: Test Dataset Creation
        run: |
          python -c "
          import tempfile
          import os
          from figregistry_kedro.datasets import FigureDataSet
          
          # Test dataset creation with minimal configuration
          with tempfile.TemporaryDirectory() as tmpdir:
              filepath = os.path.join(tmpdir, 'test_figure.png')
              
              dataset = FigureDataSet(
                  filepath=filepath,
                  purpose='test',
                  condition_param='test_condition'
              )
              print('✓ FigureDataSet creation successful')
              
              # Test dataset configuration validation
              config = dataset._describe()
              print(f'Dataset config: {config}')
              
              if 'filepath' not in config:
                  print('✗ Missing filepath in dataset configuration')
                  exit(1)
              print('✓ Dataset configuration validation passed')
          "
          
      - name: Create Test Kedro Project
        run: |
          # Create a minimal Kedro project for testing
          kedro new --name=plugin_test_project --package_name=plugin_test --example=y --verbose
          cd plugin_test_project
          
          # Verify project creation
          if [ ! -f "pyproject.toml" ]; then
            echo "Error: Kedro project creation failed"
            exit 1
          fi
          echo "✓ Test Kedro project created successfully"
          
      - name: Configure Plugin in Test Project
        run: |
          cd plugin_test_project
          
          # Create figregistry configuration
          mkdir -p conf/base
          cat > conf/base/figregistry.yml << 'EOF'
          purposes:
            test:
              rcParams:
                figure.figsize: [8, 6]
                font.size: 12
            validation:
              rcParams:
                figure.figsize: [10, 8]
                font.size: 14
          
          conditions:
            test_condition:
              rcParams:
                axes.grid: true
          EOF
          
          # Add plugin to Kedro project settings
          cat >> src/plugin_test/settings.py << 'EOF'
          
          # FigRegistry Kedro Plugin Integration
          from figregistry_kedro.hooks import FigRegistryHooks
          
          HOOKS = (FigRegistryHooks(),)
          EOF
          
          # Configure catalog with FigureDataSet
          cat > conf/base/catalog.yml << 'EOF'
          test_figure:
            type: figregistry_kedro.FigureDataSet
            filepath: data/08_reporting/test_figure.png
            purpose: test
            condition_param: test_condition
            
          validation_figure:
            type: figregistry_kedro.FigureDataSet  
            filepath: data/08_reporting/validation_figure.png
            purpose: validation
          EOF
          
          echo "✓ Plugin configuration completed"
          
      - name: Test Plugin in Kedro Context
        run: |
          cd plugin_test_project
          
          # Test Kedro project initialization with plugin
          python -c "
          from kedro.framework.session import KedroSession
          from kedro.framework.startup import bootstrap_project
          from pathlib import Path
          import matplotlib
          matplotlib.use('Agg')  # Use non-interactive backend
          import matplotlib.pyplot as plt
          
          # Bootstrap the project
          bootstrap_project(Path.cwd())
          
          # Create a session and test plugin integration
          with KedroSession.create() as session:
              print('✓ Kedro session created with plugin')
              
              context = session.load_context()
              print('✓ Kedro context loaded successfully')
              
              # Test catalog access
              catalog = context.catalog
              
              # Verify FigureDataSet instances in catalog
              if 'test_figure' in catalog._datasets:
                  dataset = catalog._datasets['test_figure']
                  if hasattr(dataset, 'save'):
                      print('✓ FigureDataSet properly registered in catalog')
                  else:
                      print('✗ FigureDataSet missing save method')
                      exit(1)
              else:
                  print('✗ test_figure dataset not found in catalog')
                  exit(1)
          "
          
      - name: Performance Benchmark Test
        run: |
          cd plugin_test_project
          
          python -c "
          import time
          import matplotlib
          matplotlib.use('Agg')
          import matplotlib.pyplot as plt
          import numpy as np
          from kedro.framework.session import KedroSession
          from kedro.framework.startup import bootstrap_project
          from pathlib import Path
          
          bootstrap_project(Path.cwd())
          
          # Benchmark plugin performance vs manual save
          def create_test_figure():
              fig, ax = plt.subplots(figsize=(8, 6))
              x = np.linspace(0, 10, 100)
              ax.plot(x, np.sin(x))
              ax.set_title('Performance Test Figure')
              return fig
          
          # Manual save timing
          start_time = time.time()
          for i in range(5):
              fig = create_test_figure()
              fig.savefig(f'manual_test_{i}.png')
              plt.close(fig)
          manual_time = time.time() - start_time
          
          # Plugin save timing
          with KedroSession.create() as session:
              context = session.load_context()
              catalog = context.catalog
              
              start_time = time.time()
              for i in range(5):
                  fig = create_test_figure()
                  try:
                      # Simulate save through catalog (create temporary dataset)
                      from figregistry_kedro.datasets import FigureDataSet
                      dataset = FigureDataSet(
                          filepath=f'plugin_test_{i}.png',
                          purpose='test'
                      )
                      dataset.save(fig)
                  except Exception as e:
                      print(f'Plugin save attempt failed: {e}')
                      # Continue with timing for comparison
                  plt.close(fig)
              plugin_time = time.time() - start_time
          
          # Calculate overhead
          if manual_time > 0:
              overhead = ((plugin_time - manual_time) / manual_time) * 100
              print(f'Manual save time: {manual_time:.3f}s')
              print(f'Plugin save time: {plugin_time:.3f}s')
              print(f'Performance overhead: {overhead:.1f}%')
              
              if overhead > ${{ env.PERFORMANCE_OVERHEAD_LIMIT }}:
                  print(f'✗ Performance overhead ({overhead:.1f}%) exceeds limit (${{ env.PERFORMANCE_OVERHEAD_LIMIT }}%)')
                  exit(1)
              else:
                  print(f'✓ Performance overhead ({overhead:.1f}%) within acceptable limit')
          else:
              print('Warning: Unable to calculate performance overhead')
          "

  # ============================================================================
  # Package Building and Distribution
  # ============================================================================
  
  build_and_publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: [pre_release_audit, plugin_validation_matrix]
    timeout-minutes: 30
    environment:
      name: pypi
      url: https://pypi.org/p/figregistry-kedro
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build>=0.7.0 twine>=4.0.0
          
      - name: Build Distribution Packages
        run: |
          echo "Building packages for version ${{ needs.pre_release_audit.outputs.version }}"
          python -m build --sdist --wheel
          
      - name: Verify Build Artifacts
        run: |
          # List built packages
          ls -la dist/
          
          # Verify wheel and sdist were created
          if [ ! -f dist/*.whl ]; then
            echo "Error: Wheel package not found"
            exit 1
          fi
          
          if [ ! -f dist/*.tar.gz ]; then
            echo "Error: Source distribution not found"
            exit 1
          fi
          
          echo "✓ All required package formats built successfully"
          
      - name: Check Package with Twine
        run: |
          python -m twine check dist/*
          
      - name: Dry Run Validation
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "DRY RUN: Would publish the following packages:"
          python -m twine check dist/* --strict
          ls -la dist/
          echo "DRY RUN: Skipping actual PyPI upload"
          
      - name: Publish to PyPI
        if: ${{ inputs.dry_run != true }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verify-metadata: true
          
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: published-packages-${{ needs.pre_release_audit.outputs.version }}
          path: dist/*
          retention-days: 90

  # ============================================================================
  # Post-Release Validation
  # ============================================================================
  
  post_release_validation:
    name: Post-Release Validation (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: [pre_release_audit, build_and_publish]
    if: ${{ inputs.dry_run != true }}
    timeout-minutes: 30
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        kedro-version: ["0.18.*", "0.19.*"]
        exclude:
          # Test core combinations for efficiency
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.12"
            
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Wait for PyPI Propagation
        run: |
          echo "Waiting for PyPI package propagation..."
          sleep 120  # Wait 2 minutes for PyPI to update
          
      - name: Create Fresh Environment
        run: |
          python -m venv fresh_test_env
          
          # Activate virtual environment (cross-platform)
          if [ "$RUNNER_OS" = "Windows" ]; then
            source fresh_test_env/Scripts/activate
          else
            source fresh_test_env/bin/activate
          fi
          
          # Upgrade pip in fresh environment
          python -m pip install --upgrade pip
          
      - name: Install from PyPI
        run: |
          # Activate virtual environment
          if [ "$RUNNER_OS" = "Windows" ]; then
            source fresh_test_env/Scripts/activate
          else
            source fresh_test_env/bin/activate
          fi
          
          # Install Kedro first
          pip install kedro==${{ matrix.kedro-version }}
          
          # Install plugin from PyPI
          pip install figregistry-kedro==${{ needs.pre_release_audit.outputs.version }}
          
          echo "✓ Plugin installed from PyPI successfully"
          
      - name: Validate Fresh Installation
        run: |
          # Activate virtual environment
          if [ "$RUNNER_OS" = "Windows" ]; then
            source fresh_test_env/Scripts/activate
          else
            source fresh_test_env/bin/activate
          fi
          
          python -c "
          import figregistry_kedro
          print(f'Installed version: {figregistry_kedro.__version__}')
          
          # Verify expected version
          expected_version = '${{ needs.pre_release_audit.outputs.version }}'
          if figregistry_kedro.__version__ != expected_version:
              print(f'✗ Version mismatch: expected {expected_version}, got {figregistry_kedro.__version__}')
              exit(1)
          
          print('✓ Version verification passed')
          
          # Test basic functionality
          from figregistry_kedro import FigureDataSet, FigRegistryHooks
          hooks = FigRegistryHooks()
          print('✓ Core functionality test passed')
          "
          
      - name: Test Fresh Kedro Project Integration
        run: |
          # Activate virtual environment
          if [ "$RUNNER_OS" = "Windows" ]; then
            source fresh_test_env/Scripts/activate
          else
            source fresh_test_env/bin/activate
          fi
          
          # Create test project
          kedro new --name=fresh_test --package_name=fresh_test --example=y
          cd fresh_test
          
          # Add plugin configuration
          mkdir -p conf/base
          echo "purposes:" > conf/base/figregistry.yml
          echo "  test:" >> conf/base/figregistry.yml
          echo "    rcParams:" >> conf/base/figregistry.yml
          echo "      figure.figsize: [8, 6]" >> conf/base/figregistry.yml
          
          # Test plugin integration
          python -c "
          from kedro.framework.session import KedroSession
          from kedro.framework.startup import bootstrap_project
          from pathlib import Path
          from figregistry_kedro.hooks import FigRegistryHooks
          
          bootstrap_project(Path.cwd())
          
          # Test session creation with plugin hooks
          with KedroSession.create() as session:
              print('✓ Fresh installation Kedro integration successful')
          "

  # ============================================================================
  # Release Coordination and Notifications
  # ============================================================================
  
  release_coordination:
    name: Release Coordination and Notifications
    runs-on: ubuntu-latest
    needs: [pre_release_audit, build_and_publish, post_release_validation]
    if: ${{ always() && inputs.dry_run != true }}
    timeout-minutes: 15
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Determine Release Status
        id: release_status
        run: |
          if [ "${{ needs.build_and_publish.result }}" = "success" ] && [ "${{ needs.post_release_validation.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Release completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Release completed with issues" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release Summary
        run: |
          cat > release_summary.md << 'EOF'
          # figregistry-kedro Release Summary
          
          **Version:** ${{ needs.pre_release_audit.outputs.version }}
          **Status:** ${{ steps.release_status.outputs.status }}
          **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Package Information
          - **PyPI URL:** https://pypi.org/project/figregistry-kedro/${{ needs.pre_release_audit.outputs.version }}/
          - **Installation:** `pip install figregistry-kedro==${{ needs.pre_release_audit.outputs.version }}`
          - **Kedro Compatibility:** ${{ env.KEDRO_MIN_VERSION }} to ${{ env.KEDRO_MAX_VERSION }}
          
          ## Validation Results
          - **Pre-release Audit:** ${{ needs.pre_release_audit.result }}
          - **Plugin Validation Matrix:** ${{ needs.plugin_validation_matrix.result }}
          - **Package Building:** ${{ needs.build_and_publish.result }}
          - **Post-release Validation:** ${{ needs.post_release_validation.result }}
          
          ## Release Notes
          ${{ needs.pre_release_audit.outputs.release_notes }}
          
          ---
          *This release was automatically generated and validated by the figregistry-kedro CI/CD pipeline.*
          EOF
          
          echo "Release summary created"
          cat release_summary.md
          
      - name: Core FigRegistry Compatibility Notification
        if: ${{ steps.release_status.outputs.status == 'success' }}
        run: |
          # This would typically trigger a notification to the core FigRegistry team
          # about the new plugin release for compatibility tracking
          echo "Would notify core FigRegistry team about plugin release ${{ needs.pre_release_audit.outputs.version }}"
          echo "Compatibility: figregistry>=0.3.0, kedro>=${{ env.KEDRO_MIN_VERSION }},<${{ env.KEDRO_MAX_VERSION }}"
          
      - name: Update Plugin Registry Submission
        if: ${{ steps.release_status.outputs.status == 'success' }}
        run: |
          # Prepare information for Kedro plugin registry submission
          cat > plugin_registry_info.json << EOF
          {
            "name": "figregistry-kedro",
            "version": "${{ needs.pre_release_audit.outputs.version }}",
            "description": "FigRegistry integration plugin for automated figure styling and management in Kedro pipelines",
            "author": "FigRegistry Development Team",
            "package_name": "figregistry-kedro",
            "kedro_version": ">=${{ env.KEDRO_MIN_VERSION }},<${{ env.KEDRO_MAX_VERSION }}",
            "python_version": ">=3.10",
            "entry_points": {
              "kedro.hooks": ["figregistry_hooks = figregistry_kedro.hooks:hooks"],
              "kedro.datasets": ["FigureDataSet = figregistry_kedro.datasets:FigureDataSet"]
            },
            "repository": "https://github.com/figregistry/figregistry-kedro",
            "documentation": "https://figregistry-kedro.readthedocs.io",
            "tags": ["visualization", "matplotlib", "figures", "styling", "configuration"]
          }
          EOF
          
          echo "Plugin registry information prepared"
          cat plugin_registry_info.json
          
      - name: Performance Metrics Summary
        if: ${{ steps.release_status.outputs.status == 'success' }}
        run: |
          echo "=== Release Performance Metrics ==="
          echo "Version: ${{ needs.pre_release_audit.outputs.version }}"
          echo "Performance Overhead Limit: ≤${{ env.PERFORMANCE_OVERHEAD_LIMIT }}%"
          echo "Coverage Threshold: ≥${{ env.COVERAGE_THRESHOLD }}%"
          echo "Cross-platform Validation: ✓ Ubuntu, Windows, macOS"
          echo "Python Version Support: ✓ 3.10, 3.11, 3.12"
          echo "Kedro Version Support: ✓ ${{ env.KEDRO_MIN_VERSION }} to ${{ env.KEDRO_MAX_VERSION }}"
          
      - name: Upload Release Documentation
        uses: actions/upload-artifact@v3
        with:
          name: release-documentation-${{ needs.pre_release_audit.outputs.version }}
          path: |
            release_summary.md
            plugin_registry_info.json
          retention-days: 365

  # ============================================================================
  # Cleanup and Final Status
  # ============================================================================
  
  release_cleanup:
    name: Release Cleanup
    runs-on: ubuntu-latest
    needs: [pre_release_audit, plugin_validation_matrix, build_and_publish, post_release_validation, release_coordination]
    if: ${{ always() }}
    timeout-minutes: 10
    
    steps:
      - name: Final Release Status
        run: |
          echo "=== Final Release Status ==="
          echo "Pre-release Audit: ${{ needs.pre_release_audit.result }}"
          echo "Plugin Validation: ${{ needs.plugin_validation_matrix.result }}"
          echo "Build and Publish: ${{ needs.build_and_publish.result }}"
          echo "Post-release Validation: ${{ needs.post_release_validation.result }}"
          echo "Release Coordination: ${{ needs.release_coordination.result }}"
          
          # Determine overall success
          if [ "${{ needs.build_and_publish.result }}" = "success" ]; then
            echo "🎉 Release ${{ needs.pre_release_audit.outputs.version }} completed successfully!"
            echo "📦 Available at: https://pypi.org/project/figregistry-kedro/${{ needs.pre_release_audit.outputs.version }}/"
            exit 0
          else
            echo "❌ Release failed. Check individual job logs for details."
            exit 1
          fi