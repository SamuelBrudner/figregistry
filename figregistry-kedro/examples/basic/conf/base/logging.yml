version: 1
disable_existing_loggers: False

formatters:
  simple:
    format: "[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
  
  detailed:
    format: "[%(asctime)s] {%(name)s:%(lineno)d} %(levelname)s - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
  
  figregistry_format:
    format: "[%(asctime)s] [FIGREGISTRY-KEDRO] {%(name)s} %(levelname)s - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"

filters:
  figregistry_filter:
    (): "logging.Filter"
    name: "figregistry_kedro"

handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: simple
    stream: ext://sys.stdout

  rich:
    class: kedro.logging.RichHandler
    rich_tracebacks: True
    # Advanced options for customisation.
    # See https://docs.kedro.org/en/stable/logging/logging.html#project-side-logging-configuration
    # tracebacks_show_locals: False

  info_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: detailed
    filename: logs/info.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8
    delay: True

  error_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: detailed
    filename: logs/error.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8
    delay: True

  # Dedicated handler for FigRegistry integration logging with enhanced visibility
  figregistry_debug_handler:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: figregistry_format
    filename: logs/figregistry_debug.log
    maxBytes: 5242880 # 5MB
    backupCount: 10
    encoding: utf8
    delay: True
    filters: [figregistry_filter]

  # Console handler specifically for FigRegistry operations during development
  figregistry_console_handler:
    class: logging.StreamHandler
    level: INFO
    formatter: figregistry_format
    stream: ext://sys.stdout
    filters: [figregistry_filter]

loggers:
  # Core Kedro logger
  kedro:
    level: INFO
    handlers: [rich, info_file_handler, error_file_handler]
    propagate: False

  # Project-specific logger for the basic example
  figregistry_kedro_basic_example:
    level: INFO
    handlers: [rich, info_file_handler, error_file_handler]
    propagate: False

  # FigRegistry-Kedro plugin loggers with enhanced debugging for educational purposes
  figregistry_kedro:
    level: DEBUG
    handlers: [figregistry_console_handler, figregistry_debug_handler, info_file_handler, error_file_handler]
    propagate: False

  # Configuration bridge operations - detailed logging for configuration debugging
  figregistry_kedro.config:
    level: DEBUG
    handlers: [figregistry_console_handler, figregistry_debug_handler, info_file_handler, error_file_handler]
    propagate: False

  # Hook lifecycle operations - visibility into plugin initialization and context management
  figregistry_kedro.hooks:
    level: DEBUG
    handlers: [figregistry_console_handler, figregistry_debug_handler, info_file_handler, error_file_handler]
    propagate: False

  # Dataset save/load operations - detailed logging for figure styling and persistence
  figregistry_kedro.datasets:
    level: DEBUG
    handlers: [figregistry_console_handler, figregistry_debug_handler, info_file_handler, error_file_handler]
    propagate: False

  # Performance monitoring for plugin operations
  figregistry_kedro.performance:
    level: INFO
    handlers: [figregistry_debug_handler, info_file_handler]
    propagate: False

  # Third-party libraries - controlled logging to avoid noise
  matplotlib:
    level: WARNING
    handlers: [info_file_handler, error_file_handler]
    propagate: False

  PIL:
    level: WARNING
    handlers: [info_file_handler, error_file_handler]
    propagate: False

  urllib3:
    level: WARNING
    handlers: [error_file_handler]
    propagate: False

  # Core FigRegistry package logging (if present)
  figregistry:
    level: INFO
    handlers: [figregistry_console_handler, figregistry_debug_handler, info_file_handler, error_file_handler]
    propagate: False

root:
  level: INFO
  handlers: [rich, info_file_handler, error_file_handler]

# Development environment logging configuration notes:
# 
# This logging configuration is designed for the basic FigRegistry-Kedro integration example
# with enhanced visibility into plugin operations for educational and debugging purposes.
#
# Key Features:
# - DEBUG level logging for all figregistry_kedro.* modules to show integration workflow
# - Dedicated figregistry_debug.log file for detailed plugin operation tracking
# - Console output for FigRegistry operations with distinctive formatting
# - Standard Kedro logging patterns for framework consistency
# - File rotation to prevent excessive disk usage during development
#
# Logger Hierarchy:
# - figregistry_kedro: Root plugin logger with comprehensive debugging
# - figregistry_kedro.config: Configuration bridge operations and merging
# - figregistry_kedro.hooks: Lifecycle hook execution and context management
# - figregistry_kedro.datasets: FigureDataSet save/load operations and styling
# - figregistry_kedro.performance: Plugin performance metrics and timing
#
# For production environments, consider:
# - Reducing figregistry_kedro.* loggers to INFO level
# - Disabling figregistry_console_handler for cleaner output
# - Adjusting file retention policies based on operational requirements
# - Integrating with centralized logging systems as needed
#
# Troubleshooting Integration Issues:
# - Check figregistry_debug.log for detailed plugin operation traces
# - Monitor console output for immediate feedback during pipeline execution
# - Review standard Kedro logs (info.log) for pipeline context correlation
# - Enable figregistry_kedro.performance logger for timing analysis