[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "figregistry-kedro-advanced-example"
version = "0.1.0"
description = "Advanced multi-environment demonstration of FigRegistry integration with Kedro ML pipelines"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "FigRegistry Team", email = "support@figregistry.io"}
]
maintainers = [
    {name = "FigRegistry Team", email = "support@figregistry.io"}
]
keywords = [
    "figregistry",
    "kedro", 
    "machine-learning",
    "data-science",
    "visualization",
    "scientific-computing",
    "pipeline",
    "automation",
    "reproducible-research"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Typing :: Typed"
]
requires-python = ">=3.10"

# Core production dependencies for advanced scenarios
dependencies = [
    # === FigRegistry-Kedro Integration (Core) ===
    "figregistry-kedro>=0.1.0",
    "figregistry>=0.3.0",
    "kedro>=0.18.0,<0.20.0",
    
    # === Data Pipeline and Configuration ===
    "kedro-datasets[pandas.CSVDataSet,pandas.ParquetDataSet,pickle.PickleDataSet]>=2.0.0",
    "pydantic>=2.9.0",
    "pyyaml>=6.0.1",
    "click>=8.0.0",
    "rich>=13.0.0",
    
    # === Advanced Visualization Backends ===
    "matplotlib>=3.9.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "bokeh>=3.0.0",
    "altair>=5.0.0",
    
    # === Scientific Computing and Data Processing ===
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "scipy>=1.11.0",
    "polars>=0.20.0",
    "pyarrow>=14.0.0",
    
    # === Machine Learning and Advanced Analytics ===
    "scikit-learn>=1.4.0",
    "xgboost>=2.0.0",
    "lightgbm>=4.0.0",
    "catboost>=1.2.0",
    "statsmodels>=0.14.0",
    
    # === Data Validation and Quality ===
    "great-expectations>=0.18.0",
    "pandera>=0.18.0",
    "cerberus>=1.3.0",
    
    # === Advanced Configuration and Environment Management ===
    "python-dotenv>=1.0.0",
    "dynaconf>=3.2.0",
    "omegaconf>=2.3.0",
    
    # === Parallel Processing and Performance ===
    "joblib>=1.3.0",
    "dask[complete]>=2024.1.0",
    "ray[default]>=2.8.0",
    
    # === Data Connectors and I/O ===
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.6.0",
    "boto3>=1.34.0",
    "s3fs>=2024.1.0",
    
    # === Experiment Tracking and MLOps ===
    "mlflow>=2.10.0",
    "wandb>=0.16.0",
    "neptune>=1.8.0",
    "comet-ml>=3.35.0",
    
    # === Monitoring and Observability ===
    "prometheus-client>=0.19.0",
    "structlog>=24.1.0",
    "sentry-sdk>=1.40.0",
    
    # === Utilities and Helpers ===
    "tqdm>=4.66.0",
    "colorama>=0.4.6",
    "tabulate>=0.9.0",
    "humanize>=4.9.0",
    "python-dateutil>=2.8.0"
]

[project.optional-dependencies]
# Development and testing dependencies
dev = [
    # === Testing Framework ===
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-asyncio>=0.23.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.2.0",
    "pytest-randomly>=3.15.0",
    "hypothesis>=6.98.0",
    
    # === Kedro Testing and Development Tools ===
    "kedro-viz>=7.0.0",
    "kedro-telemetry>=0.3.0",
    
    # === Code Quality and Formatting ===
    "black>=24.1.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.6.0",
    
    # === Documentation ===
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-jupyter>=0.24.0",
    
    # === Performance and Profiling ===
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.0",
    
    # === Jupyter and Interactive Development ===
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipykernel>=6.29.0",
    "notebook>=7.0.0"
]

# Visualization-specific optional dependencies
viz-extended = [
    "geopandas>=0.14.0",
    "folium>=0.15.0",
    "cartopy>=0.22.0",
    "holoviews>=1.18.0",
    "datashader>=0.16.0",
    "panel>=1.3.0",
    "param>=2.0.0",
    "networkx>=3.2.0",
    "igraph>=0.11.0",
    "plotnine>=0.12.0",
    "pygraphviz>=1.11",
    "wordcloud>=1.9.0",
    "pillow>=10.2.0"
]

# High-performance computing dependencies
hpc = [
    "numba>=0.59.0",
    "cupy-cuda12x>=13.0.0",
    "rapids-cucdf>=24.02.0",
    "modin[ray]>=0.25.0",
    "vaex>=4.17.0",
    "polars[all]>=0.20.0"
]

# Advanced ML and deep learning
ml-advanced = [
    "torch>=2.2.0",
    "torchvision>=0.17.0",
    "tensorflow>=2.15.0",
    "transformers>=4.37.0",
    "datasets>=2.16.0",
    "tokenizers>=0.15.0",
    "accelerate>=0.26.0",
    "evaluate>=0.4.0"
]

# Cloud and enterprise deployment
cloud = [
    "kedro-docker>=0.3.0",
    "kedro-kubernetes>=0.1.0",
    "kubernetes>=28.1.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
    "moto[s3]>=4.2.0"
]

# Complete development environment (combines all optional deps)
all = [
    "figregistry-kedro-advanced-example[dev,viz-extended,hpc,ml-advanced,cloud]"
]

[project.urls]
"Homepage" = "https://github.com/figregistry/figregistry-kedro"
"Repository" = "https://github.com/figregistry/figregistry-kedro"
"Documentation" = "https://figregistry-kedro.readthedocs.io/"
"Bug Reports" = "https://github.com/figregistry/figregistry-kedro/issues"
"Changelog" = "https://github.com/figregistry/figregistry-kedro/blob/main/CHANGELOG.md"

[project.scripts]
# Custom CLI commands for the advanced example
figregistry-kedro-advanced = "figregistry_kedro_advanced_example.cli:main"

[project.entry-points."kedro.project_commands"]
# Register custom Kedro commands for advanced features
figregistry = "figregistry_kedro_advanced_example.commands:commands"

[tool.setuptools]
packages = ["figregistry_kedro_advanced_example"]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.package-data]
"figregistry_kedro_advanced_example" = [
    "conf/**/*.yml", 
    "conf/**/*.yaml", 
    "data/**/*",
    "*.md"
]

# ================================================================
# === Development and Code Quality Configuration ===
# ================================================================

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=figregistry_kedro_advanced_example",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--junitxml=junit.xml",
    "--tb=short",
    "--disable-warnings"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slower)",
    "e2e: marks tests as end-to-end tests (slowest)",
    "gpu: marks tests that require GPU access",
    "slow: marks tests as slow running",
    "network: marks tests that require network access",
    "docker: marks tests that require Docker"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["src/figregistry_kedro_advanced_example"]
omit = [
    "tests/*",
    "src/figregistry_kedro_advanced_example/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.tox/*"
]
parallel = true
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["figregistry_kedro_advanced_example"]
known_third_party = [
    "kedro", 
    "figregistry", 
    "figregistry_kedro",
    "pandas", 
    "numpy", 
    "matplotlib", 
    "seaborn",
    "plotly",
    "sklearn",
    "scipy",
    "pydantic"
]

[tool.mypy]
python_version = "3.10"
files = ["src/figregistry_kedro_advanced_example", "tests"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "kedro.*",
    "figregistry.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "sklearn.*",
    "lightgbm.*",
    "xgboost.*",
    "catboost.*"
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "duplicate-code",
    "fixme"
]

[tool.pylint.format]
max-line-length = 100

[tool.bandit]
exclude_dirs = ["tests", "data", "docs"]
skips = ["B101", "B601"]

# ================================================================
# === Kedro Configuration ===
# ================================================================

[tool.kedro]
package_name = "figregistry_kedro_advanced_example"
project_name = "FigRegistry Kedro Advanced Example"
kedro_init_version = "0.19.3"
tools = ["pytest", "pre-commit", "ruff"]
example_pipeline = "data_processing"

# Project-specific Kedro settings
source_dir = "src"
log_level = "INFO"

# Environment configuration
environments = ["local", "staging", "production"]
default_environment = "local"

# Pipeline configuration
pipeline_registry = [
    "data_ingestion",
    "data_processing", 
    "feature_engineering",
    "model_training",
    "model_evaluation",
    "inference",
    "reporting"
]

# Advanced FigRegistry-Kedro integration settings
[tool.kedro.figregistry]
# Global FigRegistry configuration overrides
auto_init = true
config_file = "conf/base/figregistry.yml"
style_cache_size = 1000
performance_monitoring = true

# Environment-specific figure management
environments = {
    local = {purpose = "exploratory", dpi = 150},
    staging = {purpose = "presentation", dpi = 200},  
    production = {purpose = "publication", dpi = 300}
}

# Advanced catalog configuration for FigRegistry datasets
catalog_defaults = {
    save_args = {bbox_inches = "tight", transparent = false},
    style_params = {
        "figure.figsize" = [12, 8],
        "figure.facecolor" = "white",
        "axes.grid" = true,
        "axes.spines.top" = false,
        "axes.spines.right" = false
    }
}

# Pipeline-specific styling rules
pipelines = {
    training = {condition_param = "model_type"},
    inference = {condition_param = "dataset_version"},
    reporting = {condition_param = "report_type"}
}

# ================================================================
# === Advanced Project Metadata ===
# ================================================================

[tool.setuptools_scm]
write_to = "src/figregistry_kedro_advanced_example/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "node-and-date"

[project.readme]
file = "README.md"
content-type = "text/markdown"

# Enterprise deployment and security configuration
[tool.pip-audit]
require-hashes = true
vulnerability-dbs = ["osv", "pyup"]

[tool.safety]
ignore = []
output = "json"

# Advanced dependency management
[tool.dependabot]
version = 2
updates = [
    {package-ecosystem = "pip", directory = "/", schedule.interval = "weekly"},
    {package-ecosystem = "github-actions", directory = "/.github/workflows", schedule.interval = "weekly"}
]

# Documentation configuration
[tool.mkdocs]
site_name = "FigRegistry Kedro Advanced Example"
site_description = "Advanced multi-environment demonstration of FigRegistry integration with Kedro ML pipelines"
repo_name = "figregistry/figregistry-kedro"
repo_url = "https://github.com/figregistry/figregistry-kedro"

# Performance and monitoring
[tool.performance]
benchmark_timeout = 30
memory_limit_mb = 2048
enable_profiling = true
profile_output_dir = "performance_reports"

# Advanced linting and code quality
[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018", "F403", "F405"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["figregistry_kedro_advanced_example"]
known-third-party = [
    "kedro",
    "figregistry", 
    "figregistry_kedro",
    "pandas",
    "numpy", 
    "matplotlib",
    "seaborn",
    "plotly",
    "sklearn"
]