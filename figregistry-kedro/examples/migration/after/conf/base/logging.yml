# Enhanced Kedro Logging Configuration for FigRegistry Integration Migration Example
#
# This configuration demonstrates comprehensive logging visibility for the FigRegistry-Kedro
# integration compared to traditional manual figure management approaches. The enhanced logging
# provides detailed insights into automated styling processes, configuration bridge operations,
# and lifecycle hook execution, showcasing the superior observability and debugging capabilities
# of the integrated workflow.
#
# Migration Benefits Demonstrated:
# - Automated workflow visibility vs manual plt.savefig() calls
# - Configuration bridge debugging for seamless Kedro/FigRegistry integration
# - Performance monitoring showing <5% overhead vs manual operations
# - Comprehensive error handling with graceful fallback behaviors
# - Educational logging highlighting automation benefits
#
# Enhanced Features Compared to Manual Approach:
# - Real-time condition-based styling resolution logging
# - Automated figure persistence with version tracking
# - Configuration validation and merge operation visibility
# - Hook lifecycle event monitoring with performance metrics
# - Comprehensive error recovery and diagnostic information
#
# Logger Hierarchy (Enhanced):
# - kedro: Main Kedro framework logger (INFO level)
# - figregistry_kedro.*: FigRegistry plugin namespace (DEBUG level with enhanced filtering)
# - figregistry: Core FigRegistry library (DEBUG level with performance tracking)
# - migration.*: Migration-specific loggers for transformation analysis

version: 1
disable_existing_loggers: false

formatters:
  # Enhanced detailed formatter with migration context
  enhanced_verbose:
    format: "[%(asctime)s] {%(name)s:%(lineno)d} %(levelname)s [%(funcName)s] - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S.%f"
  
  # Migration-focused formatter for before/after analysis
  migration_context:
    format: "[%(asctime)s] MIGRATION {%(name)s} %(levelname)s - %(message)s [%(module)s:%(funcName)s:%(lineno)d]"
    datefmt: "%Y-%m-%d %H:%M:%S.%f"
  
  # Performance analysis formatter with timing precision
  performance_enhanced:
    format: "[%(asctime)s] PERF {%(name)s} %(levelname)s - %(message)s [Duration: %(duration_ms).2fms] [%(funcName)s:%(lineno)d]"
    datefmt: "%Y-%m-%d %H:%M:%S.%f"
  
  # Configuration bridge formatter for debugging merge operations
  config_bridge:
    format: "[%(asctime)s] CONFIG_BRIDGE {%(name)s} %(levelname)s - %(message)s [Stage: %(config_stage)s] [%(funcName)s:%(lineno)d]"
    datefmt: "%Y-%m-%d %H:%M:%S.%f"
  
  # Dataset operation formatter for FigureDataSet debugging
  dataset_operations:
    format: "[%(asctime)s] DATASET {%(name)s} %(levelname)s - %(message)s [Operation: %(operation)s] [%(funcName)s:%(lineno)d]"
    datefmt: "%Y-%m-%d %H:%M:%S.%f"
  
  # Hook lifecycle formatter for lifecycle event tracking
  hook_lifecycle:
    format: "[%(asctime)s] HOOK_LIFECYCLE {%(name)s} %(levelname)s - %(message)s [Hook: %(hook_method)s] [%(funcName)s:%(lineno)d]"
    datefmt: "%Y-%m-%d %H:%M:%S.%f"
  
  # Simplified console formatter with migration indicators
  migration_simple:
    format: "%(levelname)s [MIGRATION] %(name)s: %(message)s"

handlers:
  # Enhanced console output with migration visibility
  enhanced_console:
    class: logging.StreamHandler
    level: INFO
    formatter: migration_simple
    stream: ext://sys.stdout
  
  # Migration-specific debug console for real-time insights
  migration_debug_console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: enhanced_verbose
    stream: ext://sys.stdout
    filters: [figregistry_migration_filter]
  
  # Configuration bridge debug console for merge operation visibility
  config_bridge_console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: config_bridge
    stream: ext://sys.stdout
    filters: [config_bridge_filter]
  
  # Dataset operation console for FigureDataSet workflow visibility
  dataset_debug_console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: dataset_operations
    stream: ext://sys.stdout
    filters: [dataset_operations_filter]
  
  # Hook lifecycle console for lifecycle event monitoring
  hook_lifecycle_console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: hook_lifecycle
    stream: ext://sys.stdout
    filters: [hook_lifecycle_filter]
  
  # Enhanced info file handler with rotation for long-term analysis
  enhanced_info_file:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: enhanced_verbose
    filename: logs/migration_info.log
    maxBytes: 20971520  # 20MB - larger for comprehensive migration analysis
    backupCount: 5
    encoding: utf8
  
  # Migration analysis file for transformation tracking
  migration_analysis_file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: migration_context
    filename: logs/migration_analysis.log
    maxBytes: 10485760  # 10MB
    backupCount: 3
    encoding: utf8
    filters: [migration_analysis_filter]
  
  # Configuration bridge debug file for merge operation analysis
  config_bridge_file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: config_bridge
    filename: logs/config_bridge_debug.log
    maxBytes: 5242880   # 5MB
    backupCount: 2
    encoding: utf8
    filters: [config_bridge_filter]
  
  # Dataset operations file for FigureDataSet workflow analysis
  dataset_operations_file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: dataset_operations
    filename: logs/dataset_operations.log
    maxBytes: 5242880   # 5MB
    backupCount: 2
    encoding: utf8
    filters: [dataset_operations_filter]
  
  # Hook lifecycle file for lifecycle event analysis
  hook_lifecycle_file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: hook_lifecycle
    filename: logs/hook_lifecycle.log
    maxBytes: 5242880   # 5MB
    backupCount: 2
    encoding: utf8
    filters: [hook_lifecycle_filter]
  
  # Enhanced performance monitoring with detailed metrics
  enhanced_performance_file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: performance_enhanced
    filename: logs/performance_enhanced.log
    maxBytes: 10485760  # 10MB
    backupCount: 3
    encoding: utf8
    filters: [enhanced_performance_filter]
  
  # Error analysis file for comprehensive error tracking
  error_analysis_file:
    class: logging.handlers.RotatingFileHandler
    level: WARNING
    formatter: enhanced_verbose
    filename: logs/error_analysis.log
    maxBytes: 5242880   # 5MB
    backupCount: 3
    encoding: utf8
  
  # Style resolution file for condition-based styling debugging
  style_resolution_file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: enhanced_verbose
    filename: logs/style_resolution.log
    maxBytes: 3145728   # 3MB
    backupCount: 2
    encoding: utf8
    filters: [style_resolution_filter]

filters:
  # Enhanced FigRegistry filter for migration-specific logging
  figregistry_migration_filter:
    (): __main__.FigRegistryMigrationLogFilter
    
  # Configuration bridge filter for merge operation debugging
  config_bridge_filter:
    (): __main__.ConfigBridgeLogFilter
    
  # Dataset operations filter for FigureDataSet debugging
  dataset_operations_filter:
    (): __main__.DatasetOperationsLogFilter
    
  # Hook lifecycle filter for lifecycle event tracking
  hook_lifecycle_filter:
    (): __main__.HookLifecycleLogFilter
    
  # Migration analysis filter for transformation insights
  migration_analysis_filter:
    (): __main__.MigrationAnalysisLogFilter
    
  # Enhanced performance filter with timing analysis
  enhanced_performance_filter:
    (): __main__.EnhancedPerformanceLogFilter
    
  # Style resolution filter for condition-based styling debugging
  style_resolution_filter:
    (): __main__.StyleResolutionLogFilter

loggers:
  # Root Kedro framework logger - enhanced for migration visibility
  kedro:
    level: INFO
    handlers: [enhanced_console, enhanced_info_file]
    propagate: false
  
  # Kedro runner components - enhanced logging for pipeline execution tracking
  kedro.runner:
    level: INFO
    handlers: [enhanced_console, enhanced_info_file]
    propagate: false
  
  # Kedro IO operations - debug level for catalog integration visibility
  kedro.io:
    level: DEBUG
    handlers: [enhanced_console, enhanced_info_file, dataset_operations_file]
    propagate: false
  
  # Kedro configuration loader - enhanced for config bridge integration
  kedro.config:
    level: DEBUG
    handlers: [enhanced_console, config_bridge_file]
    propagate: false
  
  # FigRegistry plugin root logger - comprehensive debug logging
  figregistry_kedro:
    level: DEBUG
    handlers: [migration_debug_console, migration_analysis_file, enhanced_performance_file]
    propagate: false
  
  # FigRegistryHooks - detailed lifecycle event logging with enhanced visibility
  figregistry_kedro.hooks:
    level: DEBUG
    handlers: [hook_lifecycle_console, hook_lifecycle_file, enhanced_performance_file]
    propagate: false
    # Enhanced events logged:
    # - Hook registration timing and success/failure status
    # - Configuration bridge initialization with performance metrics
    # - Pipeline context establishment and threading safety validation
    # - Resource cleanup operations with memory usage tracking
    # - Hook invocation counts and latency analysis
    # - Error recovery and fallback behavior activation
  
  # FigureDataSet - comprehensive dataset operation logging with enhanced metrics
  figregistry_kedro.datasets:
    level: DEBUG
    handlers: [dataset_debug_console, dataset_operations_file, enhanced_performance_file, style_resolution_file]
    propagate: false
    # Enhanced events logged:
    # - Figure save operation timing with comparison to manual plt.savefig()
    # - Style resolution performance and cache hit/miss ratios
    # - Condition parameter extraction and validation
    # - Catalog integration workflow with Kedro versioning
    # - Thread safety validation for parallel execution
    # - Error handling and graceful degradation scenarios
    # - Configuration bridge interaction timing
    # - Style application before/after comparisons
  
  # FigRegistryConfigBridge - enhanced configuration merge operation logging
  figregistry_kedro.config:
    level: DEBUG
    handlers: [config_bridge_console, config_bridge_file, enhanced_performance_file]
    propagate: false
    # Enhanced events logged:
    # - Configuration file discovery and loading timing
    # - Kedro/FigRegistry config merging with precedence tracking
    # - Validation results with detailed error analysis
    # - Performance metrics for merge operations vs manual configuration
    # - Cache performance and invalidation tracking
    # - Environment-specific configuration resolution
    # - Configuration schema validation and type safety checks
  
  # Core FigRegistry library - enhanced debug logging for integration insights
  figregistry:
    level: DEBUG
    handlers: [enhanced_info_file, enhanced_performance_file, style_resolution_file]
    propagate: false
    # Enhanced events logged:
    # - Style resolution timing with condition matching analysis
    # - Configuration validation with detailed error reporting
    # - Output manager operations with file system performance
    # - Memory usage tracking for large figure operations
  
  # Migration-specific logger for transformation analysis
  migration:
    level: DEBUG
    handlers: [migration_debug_console, migration_analysis_file]
    propagate: false
    # Events logged:
    # - Before/after workflow comparison metrics
    # - Manual vs automated operation timing
    # - Configuration transformation success/failure
    # - User workflow improvement measurements
  
  # Style resolution logger for condition-based styling analysis
  style_resolution:
    level: DEBUG
    handlers: [style_resolution_file, enhanced_performance_file]
    propagate: false
    # Events logged:
    # - Condition parameter resolution timing
    # - Style cache performance analysis
    # - Fallback style application scenarios
    # - Style inheritance and override tracking
  
  # Performance monitoring logger for SLA compliance tracking
  performance_monitoring:
    level: DEBUG
    handlers: [enhanced_performance_file]
    propagate: false
    # Events logged:
    # - Hook execution overhead measurements
    # - Configuration bridge performance SLA compliance
    # - Dataset save operation timing vs targets
    # - Memory usage and resource utilization
  
  # Error recovery logger for comprehensive error handling analysis
  error_recovery:
    level: WARNING
    handlers: [error_analysis_file, enhanced_console]
    propagate: false
    # Events logged:
    # - Error recovery mechanism activation
    # - Fallback behavior engagement
    # - Configuration validation failures
    # - Network or file system error handling
  
  # Scientific computing libraries - controlled verbosity for cleaner logs
  matplotlib:
    level: WARNING
    handlers: [enhanced_console]
    propagate: false
  
  matplotlib.font_manager:
    level: ERROR
    handlers: [enhanced_console]
    propagate: false
  
  # Pydantic validation - enhanced for configuration debugging
  pydantic:
    level: DEBUG
    handlers: [config_bridge_file, enhanced_info_file]
    propagate: false
  
  # Python warnings - comprehensive capture for debugging
  py.warnings:
    level: WARNING
    handlers: [enhanced_console, enhanced_info_file, error_analysis_file]
    propagate: false

# Root logger configuration - enhanced for migration analysis
root:
  level: INFO
  handlers: [enhanced_console, enhanced_info_file]

# Enhanced Custom Filter Implementations for Migration Analysis
# These provide specialized filtering for different aspects of the integration
---
# Enhanced Log Filter Class Definitions (for reference - would be in separate .py file)

class FigRegistryMigrationLogFilter:
    """Enhanced filter to capture FigRegistry migration-related log messages."""
    
    def filter(self, record):
        """Return True if the log record should be processed for migration analysis."""
        # Include all FigRegistry namespaces with migration context
        migration_namespaces = [
            'figregistry_kedro',
            'figregistry',
            'migration',
            'style_resolution',
            'performance_monitoring'
        ]
        
        # Enhanced filtering with migration keywords
        migration_keywords = [
            'migration', 'automated', 'manual', 'transformation',
            'workflow', 'enhancement', 'comparison'
        ]
        
        namespace_match = any(record.name.startswith(namespace) for namespace in migration_namespaces)
        keyword_match = any(keyword in record.getMessage().lower() for keyword in migration_keywords)
        
        return namespace_match or keyword_match

class ConfigBridgeLogFilter:
    """Filter for configuration bridge operation debugging."""
    
    def filter(self, record):
        """Return True if the log record relates to configuration bridge operations."""
        bridge_indicators = [
            'config', 'bridge', 'merge', 'validation',
            'kedro.config', 'figregistry.config', 'configloader'
        ]
        
        message = record.getMessage().lower()
        name = record.name.lower()
        
        return any(indicator in message or indicator in name for indicator in bridge_indicators)

class DatasetOperationsLogFilter:
    """Filter for FigureDataSet operation debugging."""
    
    def filter(self, record):
        """Return True if the log record relates to dataset operations."""
        dataset_indicators = [
            'dataset', 'save', 'load', 'figure', 'catalog',
            'figuredataset', 'styling', 'condition'
        ]
        
        message = record.getMessage().lower()
        name = record.name.lower()
        
        return any(indicator in message or indicator in name for indicator in dataset_indicators)

class HookLifecycleLogFilter:
    """Filter for hook lifecycle event tracking."""
    
    def filter(self, record):
        """Return True if the log record relates to hook lifecycle events."""
        hook_indicators = [
            'hook', 'lifecycle', 'before_pipeline', 'after_pipeline',
            'initialization', 'cleanup', 'context'
        ]
        
        message = record.getMessage().lower()
        name = record.name.lower()
        
        return any(indicator in message or indicator in name for indicator in hook_indicators)

class MigrationAnalysisLogFilter:
    """Filter for migration transformation analysis."""
    
    def filter(self, record):
        """Return True if the log record provides migration analysis insights."""
        analysis_indicators = [
            'before', 'after', 'improvement', 'automation',
            'manual', 'eliminated', 'enhanced', 'benefit'
        ]
        
        message = record.getMessage().lower()
        
        return any(indicator in message for indicator in analysis_indicators)

class EnhancedPerformanceLogFilter:
    """Enhanced filter for performance-related log messages with timing analysis."""
    
    def filter(self, record):
        """Return True if the log record contains enhanced performance information."""
        performance_indicators = [
            'timing', 'performance', 'duration', 'elapsed', 'latency',
            'sla', 'overhead', 'benchmark', 'cache', 'hit', 'miss',
            'memory', 'cpu', 'thread', 'parallel', 'optimization'
        ]
        
        message = record.getMessage().lower()
        
        # Check for timing values in the message
        timing_patterns = ['ms', 'seconds', 'μs', 'nanoseconds']
        has_timing = any(pattern in message for pattern in timing_patterns)
        
        # Check for performance keywords
        has_perf_keyword = any(indicator in message for indicator in performance_indicators)
        
        return has_timing or has_perf_keyword

class StyleResolutionLogFilter:
    """Filter for condition-based style resolution debugging."""
    
    def filter(self, record):
        """Return True if the log record relates to style resolution operations."""
        style_indicators = [
            'style', 'condition', 'resolution', 'styling',
            'get_style', 'apply', 'fallback', 'default'
        ]
        
        message = record.getMessage().lower()
        name = record.name.lower()
        
        return any(indicator in message or indicator in name for indicator in style_indicators)

# Configuration Enhancement Notes:
#
# 1. Migration Focus:
#    - Comprehensive before/after workflow comparison logging
#    - Enhanced visibility into automation benefits vs manual approaches
#    - Performance metrics demonstrating <5% overhead vs manual operations
#    - Error handling showcasing graceful degradation capabilities
#
# 2. Educational Value:
#    - Real-time insights into automated workflow execution
#    - Configuration bridge merge operation transparency
#    - Style resolution and application process visibility
#    - Hook lifecycle event monitoring for integration understanding
#
# 3. Advanced Debugging:
#    - Specialized loggers for each integration component
#    - Performance timing with microsecond precision
#    - Memory usage and resource utilization tracking
#    - Thread safety validation for parallel execution
#
# 4. Production Readiness:
#    - Configurable log levels via environment variables
#    - Comprehensive error analysis and recovery tracking
#    - Performance SLA compliance monitoring
#    - Log rotation and retention for long-term analysis
#
# 5. Integration Benefits Highlighted:
#    - Automated vs manual workflow efficiency comparison
#    - Configuration management simplification demonstration
#    - Style consistency enforcement visibility
#    - Version control and reproducibility enhancement tracking
#
# 6. Troubleshooting Support:
#    - Detailed error recovery mechanism logging
#    - Configuration validation failure analysis
#    - Performance bottleneck identification
#    - Integration point debugging with context preservation
#
# Usage in Migration Context:
# This enhanced configuration automatically provides comprehensive visibility
# into the FigRegistry-Kedro integration workflow, demonstrating the significant
# observability and maintainability improvements over traditional manual figure
# management approaches. The logging clearly shows automation benefits while
# supporting thorough debugging and performance analysis capabilities.