[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "kedro-figregistry-example"
version = "0.1.0"
description = "Example Kedro project demonstrating automated figure management with figregistry-kedro integration"
readme = "README.md"
authors = [
    {name = "FigRegistry Example Team", email = "example@figregistry.io"}
]
maintainers = [
    {name = "FigRegistry Example Team", email = "example@figregistry.io"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: Kedro",
]
license = {text = "MIT"}
requires-python = ">=3.10"

dependencies = [
    # Core ML Pipeline Framework - Supporting lifecycle hooks and dataset integration
    "kedro>=0.18.0,<0.20.0",
    
    # FigRegistry-Kedro Integration - Primary automation dependency enabling automated figure management
    "figregistry-kedro>=0.1.0",
    
    # Data Science Pipeline Dependencies - Core functionality for machine learning workflows
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    
    # Visualization Framework - Maintained for pipeline compatibility, styling now automated
    "matplotlib>=3.9.0",
    "seaborn>=0.12.0",
    
    # Configuration and Data Management - Supporting Kedro catalog and config integration
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    
    # Data I/O Support - Common dataset formats for pipeline processing
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
]

[project.optional-dependencies]
# Development dependencies for local testing and modification
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.14.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pre-commit>=3.6.0",
]

# Documentation dependencies for project documentation
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "jupyter>=1.0.0",
    "nbconvert>=7.0.0",
]

# Extended data analysis dependencies for advanced workflows
analysis = [
    "plotly>=5.17.0",
    "bokeh>=3.3.0",
    "statsmodels>=0.14.0",
    "networkx>=3.2.0",
]

# Testing with multiple Kedro versions for compatibility validation
kedro-test = [
    "kedro==0.18.*",  # Minimum supported version
    "kedro==0.19.*",  # Latest stable version
]

[project.urls]
Homepage = "https://github.com/figregistry/figregistry-kedro"
Documentation = "https://figregistry-kedro.readthedocs.io"
Repository = "https://github.com/figregistry/figregistry-kedro"
"Bug Tracker" = "https://github.com/figregistry/figregistry-kedro/issues"
Changelog = "https://github.com/figregistry/figregistry-kedro/blob/main/CHANGELOG.md"

[project.entry-points."kedro.project_commands"]
# Optional: Custom Kedro commands for figure management
figregistry = "kedro_figregistry_example.cli:commands"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
kedro_figregistry_example = [
    "conf/**/*",
    "data/**/*",
]

# Code Quality Configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | build
  | dist
  | data
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["kedro_figregistry_example", "figregistry_kedro"]
known_third_party = ["kedro", "figregistry", "pandas", "numpy", "matplotlib"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "kedro.*",
    "figregistry.*",
    "seaborn.*",
    "scipy.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "figregistry: marks tests specific to figregistry integration",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    # Ignore specific Kedro warnings that don't affect functionality
    "ignore:.*kedro.*:UserWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/conftest.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# Kedro Configuration
[tool.kedro]
package_name = "kedro_figregistry_example"
project_name = "Kedro FigRegistry Example"
kedro_init_version = "0.19.1"
tools = ["black", "pytest", "mypy", "isort", "ruff"]
example = true

# Example-specific configuration highlighting the automated nature
[tool.figregistry-kedro]
# Demonstrates configuration integration between systems
auto_style = true
version_figures = true
cleanup_temp_files = true
performance_logging = false
parallel_safe = true

# Project Management
[tool.setuptools_scm]
write_to = "src/kedro_figregistry_example/_version.py"

[tool.bandit]
exclude_dirs = ["tests", "data"]
skips = ["B101", "B601"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
fail-under = 80
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

# Additional tool configurations for development consistency
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$major.$minor.$patch"
version_files = [
    "pyproject.toml:version",
]