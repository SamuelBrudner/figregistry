# Traditional Kedro Data Catalog Configuration (Before FigRegistry Integration)
# ============================================================================
# This catalog demonstrates the manual, fragmented approach to figure management 
# that requires hardcoded paths, manual styling, and individual dataset 
# configuration for each plot type. This showcases the overhead and maintenance
# burden that figregistry-kedro eliminates through automated styling and 
# intelligent versioning.
# ============================================================================

# ============================================================================
# RAW DATA INPUTS - Standard Kedro Patterns
# ============================================================================

# Primary dataset for machine learning experiment
raw_ml_dataset:
  type: pandas.CSVDataSet
  filepath: data/01_raw/ml_dataset.csv
  load_args:
    sep: ","
    index_col: 0

# Feature metadata for analysis
feature_metadata:
  type: pandas.CSVDataSet  
  filepath: data/01_raw/feature_metadata.csv

# Model comparison baseline data
baseline_results:
  type: pandas.CSVDataSet
  filepath: data/01_raw/baseline_results.csv

# ============================================================================
# INTERMEDIATE DATA PROCESSING - Standard Kedro Patterns  
# ============================================================================

# Preprocessed training dataset
processed_train_data:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/processed_train.parquet

# Preprocessed test dataset  
processed_test_data:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/processed_test.parquet

# Feature engineering outputs
engineered_features:
  type: pandas.ParquetDataSet
  filepath: data/02_intermediate/engineered_features.parquet

# Cross-validation splits
cv_splits:
  type: pickle.PickleDataSet
  filepath: data/02_intermediate/cv_splits.pkl

# ============================================================================
# PRIMARY ANALYSIS OUTPUTS - Standard Kedro Patterns
# ============================================================================

# Trained model artifacts
trained_random_forest_model:
  type: pickle.PickleDataSet
  filepath: data/03_primary/random_forest_model.pkl

trained_svm_model:
  type: pickle.PickleDataSet
  filepath: data/03_primary/svm_model.pkl

trained_neural_network_model:
  type: pickle.PickleDataSet
  filepath: data/03_primary/neural_network_model.pkl

# Model performance metrics
model_performance_metrics:
  type: json.JSONDataSet
  filepath: data/03_primary/model_metrics.json

# Feature importance scores
feature_importance_results:
  type: pandas.CSVDataSet
  filepath: data/03_primary/feature_importance.csv

# Cross-validation results
cv_performance_results:
  type: pandas.CSVDataSet
  filepath: data/03_primary/cv_results.csv

# ============================================================================
# MANUAL FIGURE OUTPUTS - Fragmented Matplotlib Dataset Management
# ============================================================================
# Each figure requires individual dataset configuration with hardcoded paths
# Manual styling parameters must be coordinated across pipeline nodes
# No automated versioning or condition-based styling available
# ============================================================================

# Data Exploration Plots - Manual Configuration #1
# Requires manual coordination with data_exploration_plots parameters
data_distribution_histogram:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_data_distribution_histogram.png
  save_args:
    # Hardcoded format specification - no automation
    format: png
    dpi: 300
    bbox_inches: tight
    pad_inches: 0.1
    facecolor: white
    # Manual styling must be applied in node code
    # Parameters scattered across parameters.yml

correlation_matrix_heatmap:
  type: matplotlib.MatplotlibWriter  
  filepath: data/08_reporting/figures/manual_correlation_matrix_20241201_143022.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    # Different styling approach - inconsistent with histogram
    facecolor: "#FAFAFA"
    edgecolor: black

feature_scatter_plots:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_feature_scatter_medium_dataset.png
  save_args:
    # Yet another format choice - no standardization
    format: pdf
    bbox_inches: tight
    pad_inches: 0.2
    # Manual timestamp and condition embedding in filename

pairwise_feature_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_pairwise_analysis_exp_baseline_experiment_v2.png
  save_args:
    format: png
    dpi: 150  # Different DPI - inconsistent quality
    bbox_inches: tight

# Model Performance Plots - Manual Configuration #2  
# Different styling parameters - no coordination with exploration plots
training_loss_curves:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_training_loss_random_forest_20241201.pdf
  save_args:
    # Different format for model plots - manual decision
    format: pdf
    bbox_inches: tight
    pad_inches: 0.2
    # Model-specific styling hardcoded in parameters.yml

validation_accuracy_plots:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_validation_accuracy_curves_v2.1.png
  save_args:
    format: png
    dpi: 600  # High DPI hardcoded - manual optimization
    bbox_inches: tight
    facecolor: white

roc_curve_comparison:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_roc_curves_all_models_comparison.svg
  save_args:
    # SVG format for some plots - manual choice per plot type
    format: svg
    bbox_inches: tight
    transparent: true

precision_recall_curves:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_pr_curves_baseline_experiment_v2_150_features.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    # Manual embedding of experimental conditions in filename

confusion_matrix_heatmap:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_confusion_matrix_random_forest_medium_data.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    facecolor: white
    pad_inches: 0.1

# Feature Analysis Plots - Manual Configuration #3
# Third different styling approach - requires separate coordination
feature_importance_bar_chart:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_feature_importance_top20_random_forest.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    # Feature plot specific styling from parameters.yml
    facecolor: "#FAFAFA"

feature_correlation_network:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_feature_correlation_network_95_threshold.svg
  save_args:
    format: svg
    bbox_inches: tight
    transparent: true
    # Network plots use SVG - manual format decision

permutation_importance_comparison:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_permutation_importance_all_algorithms_20241201_143500.pdf
  save_args:
    format: pdf
    bbox_inches: tight
    pad_inches: 0.15
    # Manual timestamp embedding - no automation

# Cross-Validation Analysis - Manual Configuration #4
# Requires manual coordination with cv_plots parameters
cv_score_distributions:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_cv_scores_boxplot_5_folds.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    facecolor: white

cv_learning_curves:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_cv_learning_curves_random_forest_100_epochs.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    # Learning curve specific parameters manually embedded

cv_validation_curves:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_cv_validation_curves_hyperparameter_sweep.pdf
  save_args:
    format: pdf
    bbox_inches: tight
    # Different format for validation curves - manual choice

# Algorithm Comparison Plots - Manual Configuration #5
# Requires manual color coordination across multiple plots
algorithm_performance_radar:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_algorithm_radar_6_algorithms_comparison.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    facecolor: white
    # Radar plot specific styling manually applied

algorithm_runtime_comparison:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_runtime_comparison_bar_chart_medium_dataset.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

algorithm_scalability_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_scalability_analysis_dataset_size_sweep.svg
  save_args:
    format: svg
    bbox_inches: tight
    transparent: true

# Neural Network Specific Plots - Manual Configuration #6
# Specialized plots with their own manual styling requirements
nn_architecture_diagram:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_nn_architecture_3_layers_visualization.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    facecolor: white
    # Architecture diagram specific styling

nn_training_history:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_nn_training_history_100_epochs_32_batch.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

nn_gradient_flow_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_nn_gradient_flow_layer_analysis.pdf
  save_args:
    format: pdf
    bbox_inches: tight
    pad_inches: 0.2

# SVM Specific Plots - Manual Configuration #7
# Different algorithm requires different manual styling approach
svm_decision_boundary:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_svm_decision_boundary_2d_projection.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight
    facecolor: white
    # Decision boundary specific styling

svm_support_vector_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_svm_support_vectors_analysis_rbf_kernel.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

svm_hyperparameter_grid_search:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_svm_grid_search_c_gamma_heatmap.pdf
  save_args:
    format: pdf
    bbox_inches: tight

# Executive Summary Plots - Manual Configuration #8
# High-quality plots for reporting with manual specifications
executive_summary_overview:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_executive_summary_key_findings_v2.png
  save_args:
    format: png
    dpi: 600  # High DPI for executive reports - manually specified
    bbox_inches: tight
    facecolor: white
    pad_inches: 0.3  # Extra padding for professional look

model_comparison_summary:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_model_comparison_summary_table_baseline_exp_v2.pdf
  save_args:
    format: pdf  # PDF for executive summary - manual choice
    bbox_inches: tight
    pad_inches: 0.4

key_insights_visualization:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/figures/manual_key_insights_infographic_random_forest_winner.png
  save_args:
    format: png
    dpi: 600
    bbox_inches: tight
    facecolor: white

# ============================================================================
# MANUAL INTERMEDIATE PLOT OUTPUTS - Development/Debug Figures
# ============================================================================
# Lower quality plots for development workflow - manual DPI reduction
# Each requires separate configuration and styling coordination

# Quick development plots with reduced quality for speed
debug_data_shape_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/debug/manual_debug_data_shapes_quick.png
  save_args:
    format: png
    dpi: 100  # Low DPI for debug - manual optimization
    bbox_inches: tight

debug_feature_distributions:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/debug/manual_debug_feature_dist_preview.jpg
  save_args:
    format: jpg  # JPG for quick preview - different format
    quality: 85
    bbox_inches: tight

debug_model_convergence:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/debug/manual_debug_convergence_check.png
  save_args:
    format: png
    dpi: 150
    bbox_inches: tight

# Validation plots for pipeline debugging
pipeline_validation_plots:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/debug/manual_pipeline_validation_checks_20241201.png
  save_args:
    format: png
    dpi: 200
    bbox_inches: tight

# ============================================================================
# MANUAL ENVIRONMENT-SPECIFIC CONFIGURATIONS
# ============================================================================
# These would need to be duplicated across local/staging/production
# Manual management required for environment-specific paths and quality

# Development environment plots (would be in conf/local/catalog.yml)
# - Lower DPI for faster development iteration
# - Simplified file naming without detailed metadata
# - Quick formats (PNG/JPG) for speed

# Production environment plots (would be in conf/production/catalog.yml)  
# - High DPI for publication quality
# - Detailed file naming with full experimental metadata
# - High-quality formats (PDF/SVG) for archival

# ============================================================================
# ISSUES DEMONSTRATED BY THIS MANUAL APPROACH:
# ============================================================================
# 1. FRAGMENTED CONFIGURATION: 
#    - Styling parameters scattered across parameters.yml sections
#    - Inconsistent naming conventions (fig_width vs canvas_width vs figure_size_width)
#    - No unified style management across plot types
#
# 2. MANUAL FILE PATH MANAGEMENT:
#    - Hardcoded timestamps in filenames (20241201_143022)
#    - Manual embedding of experimental conditions (medium_dataset, random_forest)
#    - No automated versioning or intelligent naming
#    - Duplicate environment configurations required
#
# 3. FORMAT INCONSISTENCIES:
#    - Different formats per plot type (PNG/PDF/SVG/JPG)
#    - Inconsistent DPI settings (100/150/300/600)
#    - Manual quality optimization per use case
#
# 4. STYLING COORDINATION OVERHEAD:
#    - Each plot type requires separate styling in pipeline nodes
#    - No condition-based style resolution
#    - Manual color scheme management across related plots
#    - Inconsistent figure sizing and layout parameters
#
# 5. MAINTENANCE BURDEN:
#    - Changes require updates across multiple catalog entries
#    - No single source of truth for styling decisions  
#    - Manual coordination between parameters.yml and catalog.yml
#    - Environment-specific configurations multiply maintenance overhead
#
# 6. NO AUTOMATION:
#    - Manual plt.savefig() calls required in every node
#    - No automatic style application based on experimental conditions
#    - No intelligent versioning or organization
#    - No centralized figure management
# ============================================================================

# ============================================================================
# ADDITIONAL MANUAL OUTPUTS - Demonstrating Scale of Manual Management
# ============================================================================

# Statistical analysis plots requiring manual coordination
statistical_significance_tests:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/analysis/manual_statistical_tests_5_fold_cv_results.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

effect_size_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/analysis/manual_effect_sizes_cohen_d_random_forest_vs_baseline.pdf
  save_args:
    format: pdf
    bbox_inches: tight

# Hyperparameter optimization plots
hyperparameter_search_results:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/optimization/manual_hyperparameter_search_random_forest_grid.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

optimization_convergence_plots:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/optimization/manual_optimization_convergence_100_iterations.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

# Model interpretation plots
shap_value_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/interpretation/manual_shap_values_top_features_random_forest.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

lime_explanations:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/interpretation/manual_lime_explanations_sample_predictions.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

# Performance analysis over time
temporal_performance_analysis:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/temporal/manual_performance_over_time_experiment_timeline.png
  save_args:
    format: png
    dpi: 300
    bbox_inches: tight

# Final comparison plots for publication
publication_ready_comparison:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/publication/manual_publication_algorithm_comparison_final.pdf
  save_args:
    format: pdf
    bbox_inches: tight
    pad_inches: 0.5
    # Publication quality - manual specification

publication_methodology_diagram:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/publication/manual_methodology_flowchart_baseline_experiment_v2.svg
  save_args:
    format: svg
    bbox_inches: tight
    transparent: true

# ============================================================================
# END OF MANUAL CATALOG CONFIGURATION
# ============================================================================
# This catalog requires 50+ individual dataset configurations
# Each with manual path, format, and styling coordination
# Demonstrates the maintenance overhead eliminated by figregistry-kedro
# ============================================================================