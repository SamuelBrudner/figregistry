# Environment Variable Exploitation Configuration
# This file contains malicious configuration attempts designed to test
# FigRegistryConfigBridge and FigRegistryHooks protection against unauthorized
# environment variable access and system configuration manipulation.
#
# Security Test Coverage per Section 6.6.8.3:
# - Environment variable injection attempts and system configuration manipulation vectors
# - Privilege escalation attempts through environment variable override
# - Configuration template injection and variable expansion attacks  
# - System configuration tampering through environment variable injection
# - Environment variable expansion exploitation and template injection vectors
# - Configuration bridge exploitation targeting variable substitution attacks

# =============================================================================
# 1. ENVIRONMENT VARIABLE INJECTION ATTACKS
# =============================================================================

# Attempt to inject system environment variables into configuration
styles:
  # Direct environment variable injection
  exploit_env_injection:
    figure.figsize: "${PATH}"  # Attempt to inject PATH environment variable
    font.size: "${HOME}"       # Attempt to access HOME directory
    axes.labelcolor: "${USER}" # Attempt to access current user
  
  # Command execution through environment variable expansion
  exploit_command_injection:
    figure.dpi: "${`whoami`}"           # Command substitution attempt
    axes.grid: "${$(id)}"               # Shell command execution attempt
    font.family: "${`cat /etc/passwd`}" # System file access attempt
  
  # Python code injection through environment variables
  exploit_python_injection:
    figure.facecolor: "${__import__('os').system('rm -rf /')}"  # Destructive command
    axes.facecolor: "${eval('__import__(\"subprocess\").call([\"ls\", \"/\"])')}" # Python eval injection
    text.color: "${exec('import os; os.environ[\"MALICIOUS\"] = \"injected\"')}" # Environment manipulation

# =============================================================================
# 2. SYSTEM CONFIGURATION TAMPERING ATTEMPTS
# =============================================================================

# Attempt to override critical system paths
outputs:
  base_path: "${SYSTEM_ROOT:-/}"        # Attempt to access system root
  temp_path: "${TEMP:-/tmp}/../../../"  # Path traversal through environment vars
  log_path: "${LOG_DIR:-/var/log}/../../../etc" # Attempt to access system configs
  
  # Privilege escalation through path manipulation
  exploit_paths:
    root_access: "${SUDO_USER:-root}/.ssh" # Attempt SSH key access
    system_bins: "${PATH}/../../../bin"     # System binary directory access
    config_override: "${XDG_CONFIG_HOME:-~/.config}/../../../etc" # System config access

# Environment variable override attempts for privilege escalation
defaults:
  # Attempt to override security-critical environment variables
  security_override:
    PATH: "/malicious/bin:${PATH}"          # PATH injection
    LD_LIBRARY_PATH: "/malicious/lib"       # Library path hijacking
    PYTHONPATH: "/malicious/python"         # Python path manipulation
    HOME: "/root"                           # Home directory elevation
    USER: "root"                            # User privilege escalation
    SHELL: "/bin/bash -c 'malicious_cmd'"   # Shell command injection

# =============================================================================
# 3. CONFIGURATION TEMPLATE INJECTION ATTACKS
# =============================================================================

palettes:
  # Template injection through variable expansion
  exploit_templates:
    # Jinja2-style template injection attempts
    template_injection1: "{{ config.__class__.__init__.__globals__['os'].system('malicious') }}"
    template_injection2: "{% set os = config.__class__.__init__.__globals__['os'] %}{{ os.system('rm -rf /') }}"
    
    # String formatting injection attempts
    format_injection1: "{config.__class__.__init__.__globals__[os].system(malicious)}"
    format_injection2: "{.__class__.__bases__[0].__subclasses__()[104].__init__.__globals__[sys].exit()}"
    
    # Python format string attacks
    python_format1: "{0.__class__.__base__.__subclasses__()[104].__init__.__globals__['os'].system('echo pwned')}"
    python_format2: "{config.__dict__.__class__.__base__.__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__(\"os\").system(\"ls /\")')}"

# =============================================================================
# 4. ENVIRONMENT VARIABLE EXPANSION EXPLOITATION
# =============================================================================

# Kedro-specific environment variable attacks
kedro:
  # Attempt to manipulate Kedro environment resolution
  environment_manipulation:
    # Override critical Kedro environment variables
    KEDRO_ENV: "${KEDRO_ENV:-production}/../../../"  # Environment path traversal
    KEDRO_CONFIG_DIR: "${KEDRO_CONFIG_DIR:-conf}/../../../etc" # Config directory escape
    
    # Project path manipulation
    project_override:
      KEDRO_PROJECT_PATH: "${PWD}/../../../"         # Project root escape
      KEDRO_PACKAGE_NAME: "${USER}_malicious"        # Package name injection
      
  # Catalog parameter injection
  catalog_exploitation:
    # Attempt to inject malicious parameters into catalog resolution
    dataset_paths:
      base_path: "${KEDRO_ENV:-base}/../../../root"  # Root directory access
      temp_dir: "${TMPDIR:-/tmp}/../../../etc"       # System directory access
      
    # FigureDataSet parameter injection
    figure_params:
      condition_param: "${MALICIOUS_CONDITION:-default}" # Condition parameter injection
      filepath: "${HOME}/.ssh/id_rsa"                     # SSH key access attempt
      purpose: "${USER}_exploit"                          # Purpose parameter injection

# =============================================================================
# 5. ADVANCED ENVIRONMENT VARIABLE ATTACKS
# =============================================================================

# Multi-stage environment variable chaining
advanced_exploits:
  # Chained environment variable expansion
  chained_expansion:
    level1: "${STAGE1:-${STAGE2:-${STAGE3:-/etc/passwd}}}" # Multi-level expansion
    level2: "${PATH}:${LD_LIBRARY_PATH}:${PYTHONPATH}"     # Multiple variable combination
    
  # Conditional environment variable injection
  conditional_injection:
    # Use conditional expansion to bypass filters
    conditional1: "${DEBUG:-false}${DEBUG:+;rm -rf /}"     # Conditional command execution
    conditional2: "${ENABLE_LOGS:-no}${ENABLE_LOGS:+; cat /etc/shadow}" # Conditional file access
    
  # Environment variable substitution attacks
  substitution_attacks:
    # Parameter substitution with malicious defaults
    param_sub1: "${SAFE_VAR-$(malicious_command)}"         # Command in default value
    param_sub2: "${SAFE_VAR:-`cat /etc/passwd`}"           # Backtick command execution
    param_sub3: "${SAFE_VAR:=malicious_assignment}"        # Variable assignment attack

# =============================================================================
# 6. SYSTEM BOUNDARY EXPLOITATION
# =============================================================================

# Attempt to break out of system security boundaries
system_boundaries:
  # Container escape attempts through environment variables
  container_escape:
    docker_socket: "${DOCKER_HOST:-unix:///var/run/docker.sock}" # Docker socket access
    proc_mount: "${PROC_MOUNT:-/proc}/../.."                     # Proc filesystem escape
    sys_mount: "${SYS_MOUNT:-/sys}/../.."                       # Sys filesystem escape
    
  # Network configuration manipulation
  network_exploitation:
    # Attempt to access network configuration through environment
    network_config: "${NETWORK_CONFIG:-/etc/network/interfaces}" # Network config access
    resolv_conf: "${RESOLV_CONF:-/etc/resolv.conf}"             # DNS configuration access
    hosts_file: "${HOSTS_FILE:-/etc/hosts}"                     # Hosts file access
    
  # Service configuration attacks
  service_attacks:
    # Attempt to access service configurations
    ssh_config: "${SSH_CONFIG:-/etc/ssh/sshd_config}"           # SSH daemon config
    cron_config: "${CRON_CONFIG:-/etc/crontab}"                 # Cron configuration
    sudoers_file: "${SUDOERS:-/etc/sudoers}"                    # Sudo configuration

# =============================================================================
# 7. CONFIGURATION BRIDGE SPECIFIC ATTACKS
# =============================================================================

# Target FigRegistryConfigBridge merge operations
bridge_attacks:
  # Attempt to poison configuration merge process
  merge_poisoning:
    # Inject malicious data during configuration merging
    poison_styles: 
      __class__: "malicious.injection.Class"                    # Class injection
      __module__: "os"                                          # Module override
      __dict__: "${MALICIOUS_DICT:-{}}"                        # Dictionary injection
    
    # Pydantic validation bypass attempts
    validation_bypass:
      # Attempt to bypass Pydantic field validation
      extra_field: "${BYPASS_VALIDATION:-normal_value}"         # Extra field injection
      type_confusion: "${TYPE_BYPASS:-12345}text"               # Type confusion attack
      
  # Configuration precedence manipulation
  precedence_attacks:
    # Attempt to manipulate configuration precedence rules
    kedro_override: "${KEDRO_PRECEDENCE:-false}true"            # Precedence manipulation
    env_override: "${ENV_OVERRIDE:-base}production"             # Environment override
    cache_poison: "${CACHE_KEY:-valid}malicious"               # Cache key poisoning

# =============================================================================
# 8. HOOK LIFECYCLE EXPLOITATION
# =============================================================================

# Target FigRegistryHooks lifecycle operations
hook_attacks:
  # Hook initialization exploitation
  init_exploitation:
    # Attempt to manipulate hook initialization
    hook_precedence: "${HOOK_ORDER:-normal}malicious"          # Hook order manipulation
    thread_manipulation: "${THREAD_COUNT:-1}999999"           # Resource exhaustion
    
  # Pipeline context injection
  context_injection:
    # Attempt to inject malicious context into pipeline execution
    pipeline_name: "${PIPELINE_NAME:-default}; malicious_cmd"  # Pipeline name injection
    session_id: "${SESSION_ID:-session}/../../../etc/passwd"   # Session ID path traversal
    run_params: "${RUN_PARAMS:-{}}malicious_params"            # Run parameter injection
    
  # State management attacks
  state_attacks:
    # Attempt to manipulate hook state management
    state_override: "${HOOK_STATE:-initialized}corrupted"      # State corruption
    bridge_replacement: "${BRIDGE_INSTANCE:-valid}malicious"   # Bridge instance replacement
    cache_corruption: "${CONFIG_CACHE:-clean}poisoned"         # Cache poisoning

# =============================================================================
# 9. COMPREHENSIVE SECURITY BOUNDARY TESTS
# =============================================================================

# Final comprehensive tests for all security boundaries
comprehensive_tests:
  # All-in-one exploitation attempt
  kitchen_sink:
    # Combine multiple attack vectors in single configuration
    multi_vector: "${PATH}:${HOME}:${USER}:`whoami`:$(id):${__import__('os').system('echo pwned')}"
    
    # Nested environment variable expansion with multiple attack types
    nested_exploit: "${LEVEL1:-${LEVEL2:-${LEVEL3:-`cat /etc/passwd`}}}"
    
    # Template and environment variable combination attack
    template_env_combo: "{{ '${PATH}'.split(':')[0] }}/../../../etc/shadow"
    
  # Defense evasion attempts
  evasion_techniques:
    # Use encoding/obfuscation to evade detection
    base64_payload: "${BASE64_DECODE:-normal}$(echo 'bWFsaWNpb3VzX2NvbW1hbmQ=' | base64 -d)"
    hex_payload: "${HEX_DECODE:-normal}$(echo '6d616c6963696f75735f636f6d6d616e64' | xxd -r -p)"
    url_encoding: "${URL_DECODE:-normal}%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
    
  # Final system integrity tests
  integrity_tests:
    # Attempt comprehensive system compromise
    full_compromise: "${ROOT_ACCESS:-/}:${SUDO_POWER:-sudo}:${SHELL_ACCESS:-/bin/bash}"
    data_exfiltration: "${SENSITIVE_DATA:-/etc/passwd}:${SSH_KEYS:-~/.ssh}:${CONFIG_FILES:-/etc}"
    persistence: "${CRON_JOB:-none}:${SERVICE_INSTALL:-none}:${BACKDOOR:-none}"

# Test metadata for validation framework
_security_test_metadata:
  test_version: "1.0.0"
  attack_vectors: 47
  coverage_areas:
    - "environment_variable_injection"
    - "system_configuration_tampering" 
    - "privilege_escalation"
    - "configuration_template_injection"
    - "variable_expansion_exploitation"
    - "system_boundary_exploitation"
    - "configuration_bridge_attacks"
    - "hook_lifecycle_exploitation"
    - "comprehensive_security_validation"
  expected_behavior: "All configuration attempts should be safely rejected or sanitized"
  security_requirements: "Section 6.6.8.3 compliance validation"