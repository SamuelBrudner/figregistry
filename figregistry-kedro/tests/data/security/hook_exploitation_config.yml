# Hook Exploitation Security Testing Configuration
# This malicious configuration file targets FigRegistryHooks security boundaries,
# environment variable manipulation, and lifecycle hook exploitation per Section 6.6.8.3
#
# WARNING: This is a security testing configuration designed to validate protection
# against hook exploitation vectors. It should NEVER be used in production environments.
#
# Security Test Categories:
# - Hook registration security and unauthorized access prevention
# - Environment variable manipulation attempts and system configuration tampering
# - Context isolation violation attempts and unauthorized session state access  
# - Privilege escalation attempts through hook lifecycle method exploitation
# - Hook lifecycle security boundary testing for comprehensive validation
#
# Reference: Technical Specification Section 6.6.8.3 - Hook Security Validation

# =============================================================================
# HOOK REGISTRATION EXPLOITATION VECTORS
# Testing unauthorized hook class injection and bypass attempts
# =============================================================================

# Attempt to override hook registration through malicious configuration
hooks:
  # Try to inject unauthorized hook classes
  figregistry_hooks:
    # Malicious hook class injection attempt
    class: "__import__('os').system('whoami')"
    # Path traversal in hook registration
    module_path: "../../../etc/passwd"
    # Arbitrary code execution through hook initialization
    init_params:
      exec_payload: "eval('__import__(\"subprocess\").call([\"cat\", \"/etc/passwd\"])')"
      # Environment variable manipulation through hook parameters
      env_override:
        PATH: "/malicious/bin:$PATH"
        PYTHONPATH: "/tmp/malicious_modules"
        KEDRO_ENV: "../../sensitive_configs"
    
  # Hook registration bypass attempts
  unauthorized_hooks:
    # Attempt to register hook without proper validation
    bypass_registration: true
    # SQL injection style attack on hook registry
    hook_name: "'; DROP TABLE hooks; --"
    # Code injection through hook metadata
    description: "{{7*7}}${PATH}$(whoami)"

# =============================================================================  
# ENVIRONMENT VARIABLE MANIPULATION VECTORS
# Testing system configuration tampering and security boundary bypass
# =============================================================================

environment_exploitation:
  # Direct environment variable override attempts
  env_overrides:
    # Path manipulation for privilege escalation
    PATH: "/tmp/malicious:/bin:/usr/bin"
    LD_LIBRARY_PATH: "/tmp/malicious_libs"
    PYTHONPATH: "/tmp/python_exploits"
    # Kedro-specific environment manipulation
    KEDRO_ENV: "../../../sensitive"
    KEDRO_CONFIG_PATH: "/etc/passwd"
    KEDRO_PROJECT_PATH: "/"
    # System configuration tampering
    HOME: "/tmp/fake_home"
    USER: "root"
    SHELL: "/bin/bash -c 'cat /etc/passwd'"
    
  # Environment variable injection through configuration values
  config_injection:
    # Template injection attempts
    project_name: "${PATH}"
    output_path: "$(whoami)"
    log_level: "{%raw%}{{7*7}}{%endraw%}"
    # Command injection through environment expansion
    working_directory: "`rm -rf /tmp/test`"

# =============================================================================
# HOOK LIFECYCLE EXPLOITATION VECTORS  
# Testing before_pipeline_run and after_pipeline_run security boundaries
# =============================================================================

lifecycle_exploitation:
  # before_pipeline_run hook exploitation
  before_pipeline_run:
    # Arbitrary code execution attempts during hook initialization
    malicious_params:
      # Python code injection
      code_exec: "exec('import os; os.system(\"ls -la /\")')"
      # Shell command injection  
      shell_exec: "$(cat /etc/passwd)"
      # Template injection
      template_exec: "{{7*7}}"
      # File system manipulation
      file_operations:
        - "open('/etc/passwd', 'r').read()"
        - "import shutil; shutil.rmtree('/tmp/test')"
    
    # Configuration manipulation during lifecycle
    config_tampering:
      # Override security configurations
      override_security: true
      disable_validation: true
      bypass_permissions: true
      # Malicious configuration injection
      inject_config:
        malicious_style:
          command_exec: "os.system('whoami')"
          file_access: "open('/etc/passwd').read()"
    
    # Context isolation violation attempts
    context_violations:
      # Access unauthorized session state
      session_hijack: "__kedro_session__._context._catalog._datasets"
      # Pipeline metadata manipulation
      pipeline_tampering: "__kedro_context__.pipeline._nodes"
      # Internal state access
      internal_access: "__kedro_session__.__dict__"

  # after_pipeline_run hook exploitation  
  after_pipeline_run:
    # Persistence attempts through cleanup hooks
    persistence_vectors:
      # Create backdoor files during cleanup
      create_backdoor: "open('/tmp/.backdoor', 'w').write('malicious')"
      # Modify system configuration during cleanup
      modify_config: "with open('/etc/hosts', 'a') as f: f.write('malicious')"
      
    # Data exfiltration attempts
    exfiltration:
      # Access pipeline execution results
      steal_data: "__kedro_catalog__.list()"
      # Export sensitive configuration
      export_config: "__kedro_context__.config_loader.get('*')"
      # Access file system beyond authorized scope
      unauthorized_access: "os.listdir('/')"

# =============================================================================
# CONTEXT ISOLATION VIOLATION VECTORS
# Testing unauthorized session state access and privilege boundaries  
# =============================================================================

context_isolation_attacks:
  # Session state manipulation attempts
  session_attacks:
    # Direct session object access
    session_hijacking:
      access_method: "__kedro_session__"
      target_attributes:
        - "_session_id"
        - "_store"
        - "_context"
        - "_hook_manager"
    
    # Context object manipulation
    context_manipulation:
      # Access internal context state
      internal_state: "__kedro_context__.__dict__"
      # Modify context configuration
      config_override: "__kedro_context__.config_loader._base_env = 'malicious'"
      # Access catalog internals
      catalog_access: "__kedro_context__.catalog._data_sets"

  # Hook manager exploitation
  hook_manager_attacks:
    # Plugin discovery manipulation
    plugin_discovery:
      # Inject malicious plugins
      malicious_plugins: ["malicious_package.evil_hook"]
      # Override plugin discovery paths
      plugin_paths: ["/tmp/malicious_plugins"]
    
    # Hook execution manipulation
    execution_hijacking:
      # Override hook execution order
      hook_order: ["malicious_hook", "figregistry_hook"]
      # Inject execution parameters
      exec_params:
        malicious_param: "eval('__import__(\"os\").system(\"whoami\")')"

# =============================================================================
# PRIVILEGE ESCALATION VECTORS
# Testing elevation through hook lifecycle methods and environment manipulation
# =============================================================================

privilege_escalation:
  # File system privilege escalation
  filesystem_escalation:
    # Path traversal for unauthorized file access
    path_traversal:
      - "../../../etc/passwd"
      - "../../../../root/.ssh/id_rsa"  
      - "/proc/self/environ"
      - "/var/log/auth.log"
    
    # Directory creation with elevated privileges
    directory_creation:
      # Attempt to create directories in protected locations
      protected_paths:
        - "/root/malicious"
        - "/etc/malicious_config"
        - "/usr/local/bin/backdoor"
    
    # File permission manipulation
    permission_manipulation:
      # Attempt to modify file permissions
      chmod_attempts:
        target: "/tmp/test_file"
        permissions: "777"
      # Attempt to change ownership
      chown_attempts:
        target: "/tmp/test_file"
        owner: "root:root"

  # Process privilege escalation
  process_escalation:
    # Subprocess creation with elevated privileges
    subprocess_attacks:
      # Shell command execution
      shell_commands:
        - "sudo whoami"
        - "su - root"
        - "chmod +s /tmp/malicious"
      
      # Environment manipulation for privilege escalation
      env_manipulation:
        LD_PRELOAD: "/tmp/malicious.so"
        SUDO_ASKPASS: "/tmp/fake_askpass"

# =============================================================================
# CONFIGURATION MERGE EXPLOITATION VECTORS  
# Testing FigRegistryConfigBridge security during configuration merging
# =============================================================================

config_merge_attacks:
  # YAML deserialization attacks
  yaml_attacks:
    # Attempt YAML code execution
    yaml_exec: !!python/object/apply:os.system ["whoami"]
    # YAML include file attacks
    yaml_include: !!python/object/apply:open ["/etc/passwd"]
    # YAML reference exploitation
    yaml_refs: &anchor
      - !!python/object/apply:eval ["__import__('os').system('ls')"]
      - *anchor

  # Configuration precedence manipulation
  precedence_attacks:
    # Override security configurations through precedence
    security_overrides:
      # Disable validation
      disable_pydantic_validation: true
      # Override safe loading
      enable_unsafe_yaml: true
      # Bypass path restrictions
      unrestricted_paths: true
    
    # Configuration injection during merge
    merge_injection:
      # Inject malicious configuration during Kedro/FigRegistry merge
      injected_config:
        malicious_style:
          exec_code: "eval('import subprocess; subprocess.call([\"cat\", \"/etc/passwd\"])')"
        evil_purpose:
          file_operation: "open('/tmp/exploit', 'w').write('pwned')"

# =============================================================================
# DATASET PARAMETER EXPLOITATION VECTORS
# Testing FigureDataSet parameter injection and manipulation
# =============================================================================

dataset_parameter_attacks:
  # Catalog entry manipulation
  catalog_exploitation:
    # Malicious FigureDataSet parameters
    malicious_dataset:
      type: "figregistry_kedro.datasets.FigureDataSet"
      # Path injection through filepath parameter
      filepath: "../../../etc/passwd"
      # Command injection through condition_param
      condition_param: "$(whoami)"
      # Code injection through style_params
      style_params:
        exec_payload: "exec('import os; os.system(\"whoami\")')"
        file_access: "open('/etc/passwd').read()"
    
    # Save arguments manipulation
    save_args_exploitation:
      # Inject malicious save arguments
      save_args:
        # Path traversal in save operations
        format: "../../../tmp/malicious.py"
        # Command injection through save parameters
        dpi: "$(cat /etc/passwd)"
        bbox_inches: "eval('__import__(\"os\").system(\"ls\")')"

  # Parameter validation bypass
  validation_bypass:
    # Bypass parameter type validation
    type_confusion:
      condition_param: ["array", "instead", "of", "string"]
      purpose: {"dict": "instead_of_string"}
    
    # Parameter injection through complex objects
    object_injection:
      malicious_object: !!python/object/new:os.system ["whoami"]
      code_object: !!python/object/apply:eval ["7*7"]

# =============================================================================
# SYSTEMATIC SECURITY BOUNDARY TESTING SCENARIOS
# Comprehensive validation vectors for testing all security boundaries
# =============================================================================

systematic_boundary_tests:
  # Test all input validation boundaries
  input_validation_tests:
    # String parameter injection tests
    string_injections:
      - "'; DROP TABLE users; --"
      - "${PATH}"
      - "$(whoami)"  
      - "{{7*7}}"
      - "%{7*7}"
      - "`cat /etc/passwd`"
      - "\"; system('whoami'); \""
    
    # Path parameter injection tests  
    path_injections:
      - "../../../etc/passwd"
      - "../../../../root/.ssh"
      - "/proc/self/environ"
      - "\\..\\..\\..\\windows\\system32"
      - "file:///etc/passwd"
      - "/dev/null; cat /etc/passwd"
    
    # Code injection tests
    code_injections:
      - "__import__('os').system('whoami')"
      - "eval('7*7')"
      - "exec('import subprocess')"
      - "compile('print(1)', '', 'exec')"

  # Test all execution context boundaries
  execution_boundaries:
    # Hook execution context tests
    hook_context_tests:
      # Test isolation between hook executions
      cross_hook_access: "__other_hook_state__"
      # Test pipeline context access restrictions
      pipeline_access: "__kedro_pipeline__.nodes[0].func.__globals__"
      # Test session isolation
      session_isolation: "__kedro_session__._store['malicious']"
    
    # Configuration context tests
    config_context_tests:
      # Test configuration scope isolation
      config_isolation: "__global_config__.update({'malicious': True})"
      # Test environment variable isolation
      env_isolation: "os.environ['MALICIOUS'] = 'true'"

  # Test all permission boundaries
  permission_boundary_tests:
    # File system permission tests
    fs_permission_tests:
      # Test read permission boundaries
      unauthorized_reads:
        - "/etc/shadow"
        - "/root/.bash_history"
        - "/var/log/auth.log"
      
      # Test write permission boundaries  
      unauthorized_writes:
        - "/etc/passwd"
        - "/root/.ssh/authorized_keys"
        - "/usr/local/bin/malicious"
    
    # Process permission tests
    process_permission_tests:
      # Test subprocess creation restrictions
      subprocess_restrictions:
        - "subprocess.call(['sudo', 'whoami'])"
        - "subprocess.Popen(['cat', '/etc/passwd'])"
        - "os.system('rm -rf /tmp/test')"

# =============================================================================
# ERROR INJECTION AND RECOVERY TESTING
# Testing error handling and graceful degradation under attack
# =============================================================================

error_injection_tests:
  # Configuration error injection
  config_error_injection:
    # Malformed YAML to test parser robustness
    malformed_yaml: "{ unclosed_dict"
    # Invalid types to test validation
    invalid_types:
      string_as_int: "not_an_integer"
      dict_as_string: {"should": "be_string"}
    
    # Resource exhaustion attacks
    resource_exhaustion:
      # Large configuration to test memory limits
      massive_config: !include massive_config.yml
      # Deep nesting to test recursion limits
      deep_nesting: &deep
        level: *deep

  # Runtime error injection  
  runtime_error_injection:
    # Hook execution errors
    hook_errors:
      # Exceptions during hook execution
      exception_injection: "raise Exception('Hook exploitation test')"
      # Resource errors during hook operations
      resource_errors: "open('/dev/null')*10000"
    
    # Configuration loading errors
    config_loading_errors:
      # File access errors during configuration loading
      file_access_error: "/nonexistent/config/path"
      # Permission errors during configuration access
      permission_error: "/root/secret_config.yml"

# =============================================================================
# METADATA AND COMMENTS FOR SECURITY TEST VALIDATION
# =============================================================================

# Security test metadata
_security_test_metadata:
  test_version: "1.0.0"
  last_updated: "2024-12-19"
  security_scope: "FigRegistryHooks lifecycle and configuration security"
  attack_categories:
    - "Hook registration security"
    - "Environment variable manipulation"  
    - "Context isolation violations"
    - "Privilege escalation attempts"
    - "Configuration merge exploitation"
    - "Dataset parameter injection"
    - "Systematic boundary testing"
  
  # Expected security behaviors
  expected_security_responses:
    - "All code execution attempts should be blocked"
    - "Environment variable modifications should be isolated"
    - "Path traversal attempts should be prevented" 
    - "Hook registration should validate authorized classes only"
    - "Context isolation should prevent cross-session access"
    - "Configuration merging should maintain type safety"
    - "Error handling should not leak sensitive information"
  
  # Security validation checklist
  validation_checklist:
    code_execution_prevention: false  # Should remain false after testing
    env_var_isolation: true           # Should remain true after testing  
    path_traversal_prevention: true   # Should remain true after testing
    hook_registration_security: true  # Should remain true after testing
    context_isolation: true           # Should remain true after testing
    config_merge_safety: true         # Should remain true after testing
    error_handling_security: true     # Should remain true after testing

# Test configuration notes
_test_notes: |
  This configuration file is designed to test FigRegistryHooks security boundaries
  as specified in Technical Specification Section 6.6.8.3. Each section targets
  specific vulnerability categories:
  
  1. Hook Registration Security: Tests unauthorized hook injection and bypass attempts
  2. Environment Variable Protection: Tests system configuration tampering vectors  
  3. Context Isolation: Tests unauthorized session state access attempts
  4. Privilege Escalation: Tests elevation through hook lifecycle methods
  5. Configuration Security: Tests YAML deserialization and merge attacks
  6. Dataset Parameter Security: Tests parameter injection and validation bypass
  7. Systematic Boundary Testing: Comprehensive validation across all input vectors
  
  All attack vectors in this file should be BLOCKED by properly implemented
  security controls. Any successful exploitation indicates a security vulnerability
  that must be addressed before release.
  
  WARNING: This file contains potentially dangerous content designed for security
  testing. It should NEVER be used in production environments and should only be
  executed in isolated testing environments with proper security controls.