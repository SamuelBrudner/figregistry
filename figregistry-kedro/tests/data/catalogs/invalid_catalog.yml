# FigRegistry Kedro Plugin - Invalid Catalog Configuration for Error Testing
#
# This file contains intentionally malformed and invalid FigureDataSet catalog entries
# designed to test error handling, parameter validation, and security vulnerability
# prevention per F-005-RQ-003 requirements.
#
# Categories tested:
# 1. Missing required parameters (filepath)
# 2. Invalid parameter types and values
# 3. Path traversal and security vulnerabilities
# 4. Malformed style_params and save_args
# 5. Conflicting configuration parameters
# 6. Parameter injection attempts
# 7. Type validation failures

# =============================================================================
# CATEGORY 1: Missing Required Parameters
# =============================================================================

# Test F-005-RQ-003: Missing filepath parameter (required)
missing_filepath:
  type: figregistry_kedro.datasets.FigureDataSet
  purpose: exploratory
  condition_param: test_condition
  # ERROR: Missing required 'filepath' parameter

# Test with empty filepath
empty_filepath:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: ""
  purpose: presentation
  # ERROR: Empty filepath string

# Test with null filepath
null_filepath:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: null
  purpose: publication
  # ERROR: Null filepath value

# =============================================================================
# CATEGORY 2: Invalid Parameter Types and Values
# =============================================================================

# Test invalid purpose type (should be string)
invalid_purpose_type:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  purpose: 123
  # ERROR: Purpose must be string, not integer

# Test invalid purpose list type
invalid_purpose_list:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  purpose: ["exploratory", "presentation"]
  # ERROR: Purpose must be string, not list

# Test invalid condition_param type (should be string)
invalid_condition_param_type:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  condition_param: {"not": "a_string"}
  # ERROR: condition_param must be string, not dict

# Test invalid condition_param list
invalid_condition_param_list:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  condition_param: ["param1", "param2"]
  # ERROR: condition_param must be string, not list

# Test invalid style_params type (should be dict)
invalid_style_params_string:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params: "not_a_dictionary"
  # ERROR: style_params must be dict, not string

# Test invalid style_params list
invalid_style_params_list:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params: ["font.size", "12"]
  # ERROR: style_params must be dict, not list

# Test invalid save_args type (should be dict)
invalid_save_args_string:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  save_args: "dpi=300"
  # ERROR: save_args must be dict, not string

# =============================================================================
# CATEGORY 3: Path Traversal and Security Vulnerabilities (Section 6.6.8.1)
# =============================================================================

# Test path traversal attempt - relative paths
path_traversal_relative:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: ../../../etc/passwd
  purpose: exploratory
  # SECURITY ERROR: Path traversal attempt using relative paths

# Test path traversal with multiple levels
path_traversal_deep:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: ../../../../../../../../sensitive_data.png
  purpose: presentation
  # SECURITY ERROR: Deep path traversal attempt

# Test absolute path injection
absolute_path_injection:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: /etc/shadow
  purpose: publication
  # SECURITY ERROR: Absolute path outside project boundaries

# Test Windows path traversal
windows_path_traversal:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: ..\\..\\..\\Windows\\System32\\config\\SAM
  purpose: exploratory
  # SECURITY ERROR: Windows-style path traversal

# Test symlink exploitation attempt
symlink_exploitation:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/../../../../../tmp/malicious_symlink.png
  purpose: presentation
  # SECURITY ERROR: Symlink exploitation attempt

# Test null byte injection
null_byte_injection:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: "data/safe_figure.png\x00../../etc/passwd"
  purpose: exploratory
  # SECURITY ERROR: Null byte injection attempt

# Test URL-encoded path traversal
url_encoded_traversal:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: "data%2F..%2F..%2F..%2Fetc%2Fpasswd"
  purpose: presentation
  # SECURITY ERROR: URL-encoded path traversal

# Test purpose parameter injection
purpose_injection_attempt:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test.png
  purpose: "exploratory; rm -rf /"
  # SECURITY ERROR: Command injection via purpose parameter

# Test condition parameter injection
condition_param_injection:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test.png
  condition_param: "param; cat /etc/passwd"
  # SECURITY ERROR: Command injection via condition_param

# Test malicious condition with filesystem access
malicious_condition_filesystem:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test.png
  condition_param: "__import__('os').system('rm -rf /')"
  # SECURITY ERROR: Python code injection attempt

# =============================================================================
# CATEGORY 4: Malformed style_params Configurations
# =============================================================================

# Test style_params with invalid matplotlib parameter values
invalid_style_params_values:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params:
    font.size: "invalid_size"  # Should be numeric
    figure.dpi: "not_a_number"  # Should be numeric
    axes.linewidth: ["1", "2"]  # Should be single value
    nonexistent.parameter: "value"  # Invalid matplotlib parameter
  # ERROR: Multiple invalid style parameter values

# Test style_params with type mismatches
style_params_type_mismatch:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params:
    figure.dpi: {width: 300, height: 200}  # Should be numeric
    font.family: 123  # Should be string
    figure.facecolor: ["red", "blue"]  # Should be single color
  # ERROR: Type mismatches in style parameters

# Test style_params with nested invalid structure
nested_invalid_style_params:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params:
    matplotlib:
      rcParams:
        font.size: 12  # Incorrectly nested structure
  # ERROR: Nested style parameters not supported

# Test style_params with malicious content
malicious_style_params:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params:
    "exec('import os; os.system(\"rm -rf /\")')": "malicious"
  # SECURITY ERROR: Malicious code in parameter name

# =============================================================================
# CATEGORY 5: Invalid save_args and load_args Configurations
# =============================================================================

# Test save_args with invalid parameter types
invalid_save_args_types:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  save_args:
    dpi: "not_numeric"  # Should be numeric
    bbox_inches: 123  # Should be string or None
    transparent: "maybe"  # Should be boolean
    format: ["png", "pdf"]  # Should be single string
  # ERROR: Invalid save_args parameter types

# Test save_args with contradictory parameters
contradictory_save_args:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  save_args:
    format: "pdf"
    facecolor: "transparent"  # Contradictory with format
    transparent: false
    bbox_inches: "tight"
    pad_inches: -1  # Invalid negative padding
  # ERROR: Contradictory save_args configuration

# Test save_args with security vulnerability
malicious_save_args:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  save_args:
    metadata:
      Creator: "__import__('os').system('malicious_command')"
  # SECURITY ERROR: Code injection via metadata

# Test load_args with invalid configuration
invalid_load_args:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  load_args:
    method: "invalid_method"  # FigureDataSet doesn't support loading
    parser: "custom_parser"
  # ERROR: load_args not supported for FigureDataSet

# =============================================================================
# CATEGORY 6: Conflicting Dataset Parameters
# =============================================================================

# Test conflicting versioning configuration
conflicting_versioning:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  versioned: true
  version: "explicit_version"  # Conflicts with versioned: true
  # ERROR: Cannot specify both versioned=true and explicit version

# Test conflicting file format specifications
conflicting_formats:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.pdf  # PDF extension
  save_args:
    format: "png"  # Conflicts with filepath extension
  # ERROR: Conflicting format specifications

# Test circular reference in parameters
circular_reference_params:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  condition_param: "self_reference"
  style_params:
    condition: "${condition_param}"  # Circular reference
  # ERROR: Circular parameter reference

# =============================================================================
# CATEGORY 7: Advanced Type Validation Failures
# =============================================================================

# Test with completely wrong dataset type
wrong_dataset_type:
  type: pandas.CSVDataSet  # Wrong type entirely
  filepath: data/test_figure.png
  purpose: exploratory
  # ERROR: Wrong dataset type for figure handling

# Test with malformed type specification
malformed_type:
  type: "figregistry_kedro.datasets.NonExistentDataSet"
  filepath: data/test_figure.png
  # ERROR: Non-existent dataset class

# Test with missing type specification
missing_type:
  filepath: data/test_figure.png
  purpose: exploratory
  # ERROR: Missing required 'type' parameter

# Test with invalid type format
invalid_type_format:
  type: 123
  filepath: data/test_figure.png
  # ERROR: Type must be string

# =============================================================================
# CATEGORY 8: Pydantic Validation Edge Cases
# =============================================================================

# Test extremely long parameter values (potential buffer overflow)
extremely_long_parameters:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  purpose: ${"x" * 10000}  # Extremely long purpose string
  condition_param: ${"param" * 1000}  # Extremely long parameter name
  # ERROR: Parameter length validation failure

# Test with unicode injection attempt
unicode_injection:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: "data/test_figure\u202e.png"  # Unicode override character
  purpose: "exploratory\u0000"  # Null character injection
  # SECURITY ERROR: Unicode-based injection attempt

# Test with special characters in parameters
special_characters_injection:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  purpose: "exploratory\n; rm -rf /; #"  # Newline and command injection
  condition_param: "param\t$(malicious_command)"  # Tab and command substitution
  # SECURITY ERROR: Special character injection

# =============================================================================
# CATEGORY 9: Resource Exhaustion Attempts
# =============================================================================

# Test with recursive parameter references
recursive_parameters:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params:
    level1:
      level2:
        level3:
          level4:
            level5: "deeply_nested"  # Excessively nested structure
  # ERROR: Recursive/deeply nested parameter structure

# Test with massive parameter dictionary
massive_parameters:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  style_params: &massive_dict
    param_1: value_1
    param_2: value_2
    param_3: value_3
    # ... would continue with thousands of parameters in real attack
    param_100: value_100
  # ERROR: Excessive parameter count (resource exhaustion)

# =============================================================================
# CATEGORY 10: Configuration Bridge Security Testing
# =============================================================================

# Test configuration merge injection
config_merge_injection:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  purpose: exploratory
  figregistry_override:  # Attempt to override FigRegistry config
    condition_styles:
      malicious: "__import__('subprocess').call(['rm', '-rf', '/'])"
  # SECURITY ERROR: Configuration bridge injection attempt

# Test environment variable injection
env_var_injection:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: "${PATH}/../../../etc/passwd"  # Environment variable exploitation
  purpose: "${HOME}; malicious_command"
  # SECURITY ERROR: Environment variable injection

# Test YAML anchor abuse
yaml_anchor_abuse: &malicious_anchor
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  purpose: "malicious"
  malicious_code: "exec('import os; os.system(\"harmful_command\")')"

# Reference to potentially dangerous anchor
anchor_reference:
  <<: *malicious_anchor
  filepath: data/another_figure.png
  # SECURITY ERROR: YAML anchor exploitation attempt

# =============================================================================
# CATEGORY 11: Invalid Kedro Integration Parameters
# =============================================================================

# Test invalid credentials configuration
invalid_credentials:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  credentials: "not_a_dict"  # Should be dict if provided
  # ERROR: Invalid credentials type

# Test invalid fs_args configuration
invalid_fs_args:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  fs_args: "invalid_filesystem_args"  # Should be dict if provided
  # ERROR: Invalid fs_args type

# Test with unsupported Kedro parameters
unsupported_kedro_params:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  layer: "invalid_layer"  # Not supported by FigureDataSet
  namespace: "invalid_namespace"  # Not supported by FigureDataSet
  # ERROR: Unsupported parameters for FigureDataSet

# =============================================================================
# CATEGORY 12: Edge Cases and Boundary Testing
# =============================================================================

# Test with empty configuration
completely_empty:
  # ERROR: Missing all required parameters

# Test with only type specified
only_type:
  type: figregistry_kedro.datasets.FigureDataSet
  # ERROR: Missing required filepath parameter

# Test with null values for optional parameters
null_optional_params:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/test_figure.png
  purpose: null  # Null optional parameter
  condition_param: null
  style_params: null
  save_args: null
  # ERROR: Null values for optional parameters

# Test with mixed valid and invalid parameters
mixed_valid_invalid:
  type: figregistry_kedro.datasets.FigureDataSet
  filepath: data/valid_figure.png  # Valid
  purpose: exploratory  # Valid
  condition_param: 123  # Invalid (should be string)
  style_params:
    font.size: 12  # Valid
    invalid.param: "bad_value"  # Invalid matplotlib parameter
  # ERROR: Mixed valid and invalid configuration

# =============================================================================
# END OF INVALID CATALOG CONFIGURATION
# =============================================================================

# Note: This catalog file intentionally contains numerous errors and security
# vulnerabilities to test the robustness of FigureDataSet parameter validation,
# error handling, and security controls. Each entry should trigger appropriate
# validation errors when processed by the dataset or configuration bridge.
#
# Security testing per Section 6.6.8.1 requirements includes:
# - Path traversal prevention
# - Parameter injection prevention 
# - Configuration merge security
# - Type safety validation
# - Resource exhaustion protection