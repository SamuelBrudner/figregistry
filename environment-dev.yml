# FigRegistry Kedro Plugin Development Environment
# Follows academic-biology software development guidelines (v2025-05-16)
# Extended environment for Kedro plugin development and testing
name: figregistry-kedro-dev  # Different name to distinguish from core figregistry
channels:
  - conda-forge
  - nodefaults

dependencies:
  # Core dependencies (same as production)
  - python=3.10
  - pip
  - pydantic>=2.9.0
  - matplotlib>=3.9.0
  - pyyaml>=6.0.1
  - numpy>=1.24.0
  - pandas>=2.0.0
  - scipy>=1.10.0

  # Kedro framework dependencies for plugin development and testing
  - kedro>=0.18.0,<0.20.0
  - kedro-datasets>=1.0.0

  # Development tools
  - pytest>=7.0.0
  - pytest-cov>=4.0.0
  - pytest-mock>=3.14.0  # Enhanced for mocking Kedro components during plugin testing
  - pytest-xdist>=3.0.0  # Parallel test execution
  - hypothesis>=6.0.0  # Property-based testing for configuration validation and dataset operations
  - black>=23.0.0
  - isort>=5.12.0
  - mypy>=1.0.0
  - ruff>=0.1.0
  - pre-commit>=3.0.0
  - jupyter>=1.0.0
  - notebook>=7.0.0
  - jupyterlab>=4.0.0
  - ipython>=8.0.0
  - mkdocs>=1.4.0
  - mkdocs-material>=9.0.0
  - mkdocstrings-python>=1.0.0
  - mkdocstrings>=0.22.0

  # Code Quality
  - interrogate>=1.5.0  # Docstring coverage

  # Documentation
  - mkdocs-jupyter>=0.24.0  # Support for Jupyter notebooks in docs

  # Optional but useful for plugin development
  - seaborn>=0.11.0  # Statistical data visualization
  - plotly>=5.0.0  # Interactive plots
  - pip-tools>=6.0.0  # For managing pip dependencies

  # Additional development utilities for Kedro plugin
  - pip:
    - build>=0.7.0  # Package building
    - twine>=4.0.0  # PyPI publishing
    - setuptools-scm>=6.2  # Version management
    - wheel>=0.37.0  # Wheel building

# Create the development environment with:
# conda env create -f environment-dev.yml
# conda activate figregistry-kedro-dev

# To update the development environment after changes:
# conda env update -f environment-dev.yml --prune

# Memory Requirements:
# Minimum 6GB available memory for Kedro context management during development
# - Core figregistry operations: ~2GB
# - Kedro pipeline context and plugin testing: ~3GB
# - Parallel test execution and temporary project creation: ~1GB
# Recommended: 8GB+ for optimal development experience with multiple Kedro contexts

# Kedro Plugin Development Notes:
# - This environment supports Kedro versions 0.18.0-0.19.x for compatibility testing
# - pytest-mock 3.14.0+ provides essential mocking for Kedro components
# - hypothesis enables property-based testing of configuration validation
# - kedro-datasets provides comprehensive dataset testing capabilities
# - Temporary Kedro projects created during testing require additional disk space (~500MB)